(()=>{"use strict";const e=({title:t,desc:n,notes:s,dueDate:c,priority:a,checkList:d,resolved:i})=>({title:t,desc:n,notes:s,dueDate:c,priority:a,checkList:d,resolved:i,copy:()=>{const c=d.map((e=>[e[0],e[1]]));return e({title:t,desc:n,notes:s,dueDate:"bad for now",priority:a,checkList:c,resolved:i})}}),t=(t,n)=>({name:t,taskList:n,addTask:()=>{const t=e({title:"New Task",desc:"A blank task",notes:"blank notes",dueDate:"set this somehow",priority:"none",checkList:[["sample checkbox",!1]],resolved:!1});n.push(t)},deleteTask:e=>{for(let t=0;t<n.length;t++)if(n[t]===e){n.splice(t,1);break}}});let n;const s="Odin-Todo",c=()=>{localStorage.setItem(s,JSON.stringify(n))},a=()=>{const e=t("New Project",[]);e.addTask(),n.push(e),c()},d=(e,t)=>({elem:e,label:t,setValue:t=>{e.setAttribute("value",t)},getValue:()=>e.value}),i=(e,t)=>{e.innerHTML="";const n=document.createElement("div");n.setAttribute("id","project-info"),e.appendChild(n);const s=document.createElement("button");s.innerText="Back to Home",s.classList.add("back-button"),n.appendChild(s),s.addEventListener("click",(()=>{m(e)}));const a=document.createElement("h1");a.innerText=t.name,n.appendChild(a);const d=document.createElement("button");d.innerText="Rename Project",d.classList.add("project-rename"),n.appendChild(d),d.addEventListener("click",(()=>{const e=prompt("New project name?");e&&(t.name=e,a.innerText=e,c())}));const l=document.createElement("button");l.innerText="Create New Task",l.classList.add("create-button"),e.appendChild(l),l.addEventListener("click",(()=>{t.addTask(),c(),i(e,t)}));const r=document.createElement("ul");r.setAttribute("id","task-list"),e.appendChild(r);const p=t.taskList,u={content:e,project:t};p.forEach((e=>{const t=document.createElement("li");r.appendChild(t),o(e,t,u)})),e.appendChild(r)},o=(e,t,n)=>{const s=l(e,t),c=document.createElement("button");return c.classList.add("mini-task-expand"),c.innerText=">",s.append(c),c.addEventListener("click",(()=>{t.innerHTML="",r(e,t,n)})),s},l=(e,t,n)=>{const s=document.createElement("div");s.classList.add("mini-task"),t.append(s);const c=document.createElement("div");c.classList.add("mini-task-title"),c.innerText=e.title,s.append(c);const a=document.createElement("div");return a.classList.add("mini-task-date"),a.innerText=e.dueDate,s.append(a),e.resolved?s.classList.add(p("none")):s.classList.add(p(e.priority)),s},r=(e,t,n)=>{const s=document.createElement("div");s.classList.add("full-task"),t.append(s);const a=l(e,s),p=document.createElement("button");p.classList.add("mini-task-expand"),p.innerText="^",a.append(p),p.addEventListener("click",(()=>{t.innerHTML="",o(e,t)}));const m=document.createElement("div");m.classList.add("full-task-details"),t.append(m);const u=document.createElement("div");u.classList.add("full-task-text"),u.innerText=e.desc,m.append(u);const k=document.createElement("div");k.classList.add("full-task-text"),k.innerText=e.notes,m.append(k);const E=document.createElement("div");E.classList.add("full-task-text"),e.resolved?E.innerText="Priority: none (resolved)":E.innerText=`Priority: ${e.priority}`,m.append(E);const L=document.createElement("ul");L.classList.add("full-task-list"),m.append(L),e.checkList.forEach((e=>{const t=document.createElement("li");t.classList.add("full-task-list-item"),L.append(t);const n=document.createElement("input");n.setAttribute("type","checkbox"),t.append(n),e[1]&&n.toggleAttribute("checked"),t.addEventListener("click",(()=>{e[1]=!e[1],c()}));const s=document.createElement("p");s.innerText=e[0],t.append(s)}));const T=document.createElement("div");T.classList.add("full-task-button-row"),m.append(T);const v=document.createElement("button");v.classList.add("full-task-edit"),v.innerText="Edit Task",T.append(v),v.addEventListener("click",(()=>{const t=e.copy();((e,t,n,s)=>{e.innerHTML="";const a=document.createElement("div");a.setAttribute("id","task-header"),e.append(a);const o=document.createElement("button");o.innerText="Back to Project",o.classList.add("back-button"),a.append(o),o.addEventListener("click",(()=>{i(e,t)}));const l=document.createElement("h1");l.innerText="Edit Task",a.appendChild(l);const r=document.createElement("div");r.setAttribute("id","task-container"),e.append(r);const p=((e,t,n,s)=>{const c=document.createElement("div");e.append(c);const a=document.createElement("label");a.innerText=t,c.append(a);const d=document.createElement(n);c.append(d);const i=s(d,a);return console.log(i),i})(r,"Title","input",d);p.setValue(s.title);const m=document.createElement("button");m.innerText="Save Task",e.append(m),m.addEventListener("click",(()=>{s.title=p.getValue(),t.taskList=t.taskList.map((e=>e===n?s:e)),c(),i(e,t)}))})(n.content,n.project,e,t)}));const h=document.createElement("button");h.classList.add("full-task-delete"),h.innerText="Delete Task",T.append(h),h.addEventListener("click",(()=>{t.remove(),n.project.deleteTask(e),c()}));const b=document.createElement("button");return b.classList.add("full-task-resolve"),b.innerText="Toggle Resolved",T.append(b),b.addEventListener("click",(()=>{e.resolved=!e.resolved,t.innerHTML="",r(e,t,n),c()})),s},p=e=>{switch(e){case"high":return"high-priority";case"medium":return"medium-priority";case"low":return"low-priority";default:return"no-priority"}},m=e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODO Lists",e.appendChild(t);const d=document.createElement("button");d.innerText="Create New Project",d.classList.add("create-button"),e.appendChild(d),d.addEventListener("click",(()=>{a(),m(e)}));const o=document.createElement("ul");o.setAttribute("id","project-list"),e.appendChild(o),n.forEach((t=>{const s=document.createElement("li");s.classList.add("project");const a=document.createElement("div");a.classList.add("project-title"),a.innerText=t.name,s.append(a);const d=document.createElement("div");d.classList.add("project-counter"),d.innerText=`${t.taskList.length} todos`,s.append(d);const l=document.createElement("button");l.classList.add("project-view"),l.innerText="View",s.append(l),l.addEventListener("click",(()=>{i(e,t)}));const r=document.createElement("button");r.classList.add("project-delete"),r.innerText="Delete",s.append(r),r.addEventListener("click",(()=>{(e=>{n=n.filter((t=>t!==e)),c()})(t),m(e)})),o.appendChild(s)})),e.appendChild(o);const l=document.createElement("button");l.classList.add("home-reset"),l.innerText="Reset all",e.append(l),l.addEventListener("click",(()=>{n=[],localStorage.setItem(s,JSON.stringify(null)),a(),m(e)}))};console.log("webpack compiled to main.js");const u=document.querySelector("#content");(()=>{const c=JSON.parse(localStorage.getItem(s));c&&0!==c.length?n=c.map((n=>(n=>{let s=n.taskList.map((t=>(t=>e(t))(t)));return t(n.name,s)})(n))):(console.log("initialize project list"),n=[],a()),console.table(n)})(),m(u),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,