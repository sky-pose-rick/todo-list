(()=>{"use strict";const e=({title:e,desc:t,notes:n,dueDate:s,priority:c,checkList:a,resolved:d})=>({title:e,desc:t,notes:n,dueDate:s,priority:c,checkList:a,resolved:d}),t=(t,n)=>({name:t,taskList:n,addTask:()=>{const t=e({title:"New Task",desc:"A blank task",notes:"blank notes",dueDate:"set this somehow",priority:0,checkList:null,resolved:!1});n.push(t)}});let n;const s="Odin-Todo",c=()=>{localStorage.setItem(s,JSON.stringify(n))},a=()=>{const e=t("New Project",[]);e.addTask(),n.push(e),c()},d=(e,t)=>{e.innerHTML="";const n=document.createElement("button");n.innerText="Back to Home",n.classList.add("back-button"),e.appendChild(n),n.addEventListener("click",(()=>{i(e),c()}));const s=document.createElement("h1");s.innerText=t.name,e.appendChild(s);const a=document.createElement("button");a.innerText="Rename Project",a.classList.add("project-rename"),e.appendChild(a);const l=document.createElement("button");l.innerText="Create New Task",l.classList.add("create-button"),e.appendChild(l),l.addEventListener("click",(()=>{console.log(t.taskList),t.addTask(),c(),d(e,t)}));const r=document.createElement("ul");r.setAttribute("id","task-list"),e.appendChild(r),t.taskList.forEach((e=>{const t=o(e);r.appendChild(t)})),e.appendChild(r)},o=e=>{const t=document.createElement("li");t.classList.add("mini-task");const n=document.createElement("div");return n.classList.add("mini-task-title"),n.innerText=e.title,t.append(n),t},i=e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODO Lists",e.appendChild(t);const o=document.createElement("button");o.innerText="Create New Project",o.classList.add("create-button"),e.appendChild(o),o.addEventListener("click",(()=>{a(),i(e)}));const l=document.createElement("ul");l.setAttribute("id","project-list"),e.appendChild(l),n.forEach((t=>{const s=document.createElement("li");s.classList.add("project");const a=document.createElement("div");a.classList.add("project-title"),a.innerText=t.name,s.append(a);const o=document.createElement("div");o.classList.add("project-counter"),o.innerText=`${t.taskList.length} todos`,s.append(o);const r=document.createElement("button");r.classList.add("project-view"),r.innerText="View",s.append(r),r.addEventListener("click",(()=>{d(e,t)}));const p=document.createElement("button");p.classList.add("project-delete"),p.innerText="Delete",s.append(p),p.addEventListener("click",(()=>{(e=>{n=n.filter((t=>t!==e)),c()})(t),i(e)})),l.appendChild(s)})),e.appendChild(l);const r=document.createElement("button");r.classList.add("home-reset"),r.innerText="Reset all",e.append(r),r.addEventListener("click",(()=>{n=[],localStorage.setItem(s,JSON.stringify(null)),a(),i(e)}))};console.log("webpack compiled to main.js");const l=document.querySelector("#content");(()=>{const c=JSON.parse(localStorage.getItem(s));c&&0!==c.length?n=c.map((n=>(n=>{let s=n.taskList.map((t=>(t=>e(t))(t)));return t(n.name,s)})(n))):(console.log("initialize project list"),n=[],a()),console.table(n)})(),i(l),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,