(()=>{"use strict";const e=({title:t,desc:n,notes:s,dueDate:c,priority:d,checkList:a,resolved:i})=>({title:t,desc:n,notes:s,dueDate:c,priority:d,checkList:a,resolved:i,copy:()=>{const c=a.map((e=>[e[0],e[1]]));return e({title:t,desc:n,notes:s,dueDate:"bad for now",priority:d,checkList:c,resolved:i})}}),t=(t,n)=>({name:t,taskList:n,addTask:()=>{const t=e({title:"New Task",desc:"A blank task",notes:"blank notes",dueDate:"set this somehow",priority:"none",checkList:[["sample checkbox",!0]],resolved:!1});n.push(t)},deleteTask:e=>{for(let t=0;t<n.length;t++)if(n[t]===e){n.splice(t,1);break}}});let n;const s="Odin-Todo",c=()=>{localStorage.setItem(s,JSON.stringify(n))},d=()=>{const e=t("New Project",[]);e.addTask(),n.push(e),c()},a=(e,t)=>{e.innerHTML="";const n=document.createElement("div");n.setAttribute("id","project-info"),e.appendChild(n);const s=document.createElement("button");s.innerText="Back to Home",s.classList.add("back-button"),n.appendChild(s),s.addEventListener("click",(()=>{p(e)}));const d=document.createElement("h1");d.innerText=t.name,n.appendChild(d);const o=document.createElement("button");o.innerText="Rename Project",o.classList.add("project-rename"),n.appendChild(o);const l=document.createElement("button");l.innerText="Create New Task",l.classList.add("create-button"),e.appendChild(l),l.addEventListener("click",(()=>{t.addTask(),c(),a(e,t)}));const r=document.createElement("ul");r.setAttribute("id","task-list"),e.appendChild(r);const m=t.taskList,u={content:e,project:t};m.forEach((e=>{const t=document.createElement("li");r.appendChild(t),i(e,t,u)})),e.appendChild(r)},i=(e,t,n)=>{const s=o(e,t),c=document.createElement("button");return c.classList.add("mini-task-expand"),c.innerText=">",s.append(c),c.addEventListener("click",(()=>{t.innerHTML="",l(e,t,n)})),s},o=(e,t,n)=>{const s=document.createElement("div");s.classList.add("mini-task"),t.append(s);const c=document.createElement("div");c.classList.add("mini-task-title"),c.innerText=e.title,s.append(c);const d=document.createElement("div");return d.classList.add("mini-task-date"),d.innerText=e.dueDate,s.append(d),e.resolved?s.classList.add(r("none")):s.classList.add(r(e.priority)),s},l=(e,t,n)=>{const s=document.createElement("div");s.classList.add("full-task"),t.append(s);const d=o(e,s),r=document.createElement("button");r.classList.add("mini-task-expand"),r.innerText="^",d.append(r),r.addEventListener("click",(()=>{t.innerHTML="",i(e,t)}));const p=document.createElement("div");p.classList.add("full-task-details"),t.append(p);const m=document.createElement("div");m.classList.add("full-task-text"),m.innerText=e.desc,p.append(m);const u=document.createElement("div");u.classList.add("full-task-text"),u.innerText=e.notes,p.append(u);const k=document.createElement("div");k.classList.add("full-task-text"),e.resolved?k.innerText="Priority: none (resolved)":k.innerText=`Priority: ${e.priority}`,p.append(k);const L=document.createElement("ul");L.classList.add("full-task-list"),p.append(L),e.checkList.forEach((e=>{const t=document.createElement("li");t.classList.add("full-task-list-item"),L.append(t);const n=document.createElement("input");n.setAttribute("type","checkbox"),t.append(n);const s=document.createElement("p");s.innerText=e[0],t.append(s)}));const E=document.createElement("div");E.classList.add("full-task-button-row"),p.append(E);const T=document.createElement("button");T.classList.add("full-task-edit"),T.innerText="Edit Task",E.append(T),T.addEventListener("click",(()=>{e.copy(),((e,t,n,s)=>{e.innerHTML="";const c=document.createElement("div");c.setAttribute("id","project-info"),e.appendChild(c);const d=document.createElement("button");d.innerText="Back to Project",d.classList.add("back-button"),c.appendChild(d),d.addEventListener("click",(()=>{a(e,t)}));const i=document.createElement("h1");i.innerText="Edit Task",c.appendChild(i)})(n.content,n.project)}));const h=document.createElement("button");h.classList.add("full-task-delete"),h.innerText="Delete Task",E.append(h),h.addEventListener("click",(()=>{t.remove(),n.project.deleteTask(e),c()}));const v=document.createElement("button");return v.classList.add("full-task-resolve"),v.innerText="Resolve Task",E.append(v),v.addEventListener("click",(()=>{e.resolved=!0,t.innerHTML="",l(e,t,n),c()})),s},r=e=>{switch(e){case"high":return"high-priority";case"medium":return"medium-priority";case"low":return"low-priority";default:return"no-priority"}},p=e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODO Lists",e.appendChild(t);const i=document.createElement("button");i.innerText="Create New Project",i.classList.add("create-button"),e.appendChild(i),i.addEventListener("click",(()=>{d(),p(e)}));const o=document.createElement("ul");o.setAttribute("id","project-list"),e.appendChild(o),n.forEach((t=>{const s=document.createElement("li");s.classList.add("project");const d=document.createElement("div");d.classList.add("project-title"),d.innerText=t.name,s.append(d);const i=document.createElement("div");i.classList.add("project-counter"),i.innerText=`${t.taskList.length} todos`,s.append(i);const l=document.createElement("button");l.classList.add("project-view"),l.innerText="View",s.append(l),l.addEventListener("click",(()=>{a(e,t)}));const r=document.createElement("button");r.classList.add("project-delete"),r.innerText="Delete",s.append(r),r.addEventListener("click",(()=>{(e=>{n=n.filter((t=>t!==e)),c()})(t),p(e)})),o.appendChild(s)})),e.appendChild(o);const l=document.createElement("button");l.classList.add("home-reset"),l.innerText="Reset all",e.append(l),l.addEventListener("click",(()=>{n=[],localStorage.setItem(s,JSON.stringify(null)),d(),p(e)}))};console.log("webpack compiled to main.js");const m=document.querySelector("#content");(()=>{const c=JSON.parse(localStorage.getItem(s));c&&0!==c.length?n=c.map((n=>(n=>{let s=n.taskList.map((t=>(t=>e(t))(t)));return t(n.name,s)})(n))):(console.log("initialize project list"),n=[],d()),console.table(n)})(),p(m),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,