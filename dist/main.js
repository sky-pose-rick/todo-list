(()=>{"use strict";const e=({title:e,desc:t,notes:n,dueDate:d,priority:s,checkList:a,resolved:c})=>({title:e,desc:t,notes:n,dueDate:d,priority:s,checkList:a,resolved:c}),t=(t,n)=>({name:t,taskList:n,addTask:()=>{const t=e({title:"New Task",desc:"A blank task",notes:"blank notes",dueDate:"set this somehow",priority:"none",checkList:null,resolved:!1});n.push(t)}});let n;const d="Odin-Todo",s=()=>{localStorage.setItem(d,JSON.stringify(n))},a=()=>{const e=t("New Project",[]);e.addTask(),n.push(e),s()},c=(e,t)=>{e.innerHTML="";const n=document.createElement("div");n.setAttribute("id","project-info");const d=document.createElement("button");d.innerText="Back to Home",d.classList.add("back-button"),n.appendChild(d),d.addEventListener("click",(()=>{r(e),s()}));const a=document.createElement("h1");a.innerText=t.name,n.appendChild(a);const o=document.createElement("button");o.innerText="Rename Project",o.classList.add("project-rename"),n.appendChild(o),e.appendChild(n);const l=document.createElement("button");l.innerText="Create New Task",l.classList.add("create-button"),e.appendChild(l),l.addEventListener("click",(()=>{t.addTask(),s(),c(e,t)}));const p=document.createElement("ul");p.setAttribute("id","task-list"),e.appendChild(p),t.taskList.forEach((e=>{const t=document.createElement("li");t.appendChild(i(e,t)),p.appendChild(t)})),e.appendChild(p)},i=(e,t)=>{const n=document.createElement("div");n.classList.add("mini-task");const d=document.createElement("div");d.classList.add("mini-task-title"),d.innerText=e.title,n.append(d);const s=document.createElement("div");s.classList.add("mini-task-date"),s.innerText=e.dueDate,n.append(s);const a=document.createElement("button");return a.classList.add("mini-task-expand"),a.innerText=">",n.append(a),a.addEventListener("click",(()=>{t.innerHTML="",t.appendChild(o(e,t))})),n.classList.add(l(e.priority)),n},o=(e,t)=>{const n=document.createElement("div");n.classList.add("full-task");const d=document.createElement("div");d.classList.add("full-task-title"),d.innerText=e.title,n.append(d);const s=document.createElement("button");return s.classList.add("mini-task-expand"),s.innerText="^",n.append(s),s.addEventListener("click",(()=>{t.innerHTML="",t.appendChild(i(e,t))})),n},l=e=>{switch(e){case"high":return"high-priority";case"medium":return"medium-priority";case"low":return"low-priority";default:return"no-priority"}},r=e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODO Lists",e.appendChild(t);const i=document.createElement("button");i.innerText="Create New Project",i.classList.add("create-button"),e.appendChild(i),i.addEventListener("click",(()=>{a(),r(e)}));const o=document.createElement("ul");o.setAttribute("id","project-list"),e.appendChild(o),n.forEach((t=>{const d=document.createElement("li");d.classList.add("project");const a=document.createElement("div");a.classList.add("project-title"),a.innerText=t.name,d.append(a);const i=document.createElement("div");i.classList.add("project-counter"),i.innerText=`${t.taskList.length} todos`,d.append(i);const l=document.createElement("button");l.classList.add("project-view"),l.innerText="View",d.append(l),l.addEventListener("click",(()=>{c(e,t)}));const p=document.createElement("button");p.classList.add("project-delete"),p.innerText="Delete",d.append(p),p.addEventListener("click",(()=>{(e=>{n=n.filter((t=>t!==e)),s()})(t),r(e)})),o.appendChild(d)})),e.appendChild(o);const l=document.createElement("button");l.classList.add("home-reset"),l.innerText="Reset all",e.append(l),l.addEventListener("click",(()=>{n=[],localStorage.setItem(d,JSON.stringify(null)),a(),r(e)}))};console.log("webpack compiled to main.js");const p=document.querySelector("#content");(()=>{const s=JSON.parse(localStorage.getItem(d));s&&0!==s.length?n=s.map((n=>(n=>{let d=n.taskList.map((t=>(t=>e(t))(t)));return t(n.name,d)})(n))):(console.log("initialize project list"),n=[],a()),console.table(n)})(),r(p),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,