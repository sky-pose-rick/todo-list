(()=>{"use strict";let e;const t="Odin-Todo",n=()=>{e.push({name:"New Project",taskList:[{title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this taks",value:!1}],resolved:!1}]}),localStorage.setItem(t,JSON.stringify(e)),console.log(e)},o=s=>{s.innerHTML="";const c=document.createElement("h1");c.innerText="TODO Lists",s.appendChild(c);const l=document.createElement("button");l.innerText="Create New Project",l.classList.add("create-button"),s.appendChild(l),l.addEventListener("click",(()=>{n(),o(s)}));const a=document.createElement("ul");a.setAttribute("id","project-list"),s.appendChild(a),e.forEach((e=>{const t=document.createElement("li");t.classList.add("project");const n=document.createElement("div");n.classList.add("project-title"),n.innerText=e.name,t.append(n);const o=document.createElement("div");o.classList.add("project-counter"),o.innerText=`${e.taskList.length} todos`,t.append(o);const s=document.createElement("button");s.classList.add("project-view"),s.innerText="View",t.append(s);const c=document.createElement("button");c.classList.add("project-delete"),c.innerText="Delete",t.append(c),a.appendChild(t)})),s.appendChild(a);const d=document.createElement("button");d.classList.add("home-reset"),d.innerText="Reset all",s.append(d),d.addEventListener("click",(()=>{e=[],localStorage.setItem(t,JSON.stringify(null)),n(),o(s)}))};console.log("webpack compiled to main.js");const s=document.querySelector("#content");(()=>{const o=JSON.parse(localStorage.getItem(t));console.log(o),e=o,0===e.length&&(console.log("initialize project list"),n())})(),o(s),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,