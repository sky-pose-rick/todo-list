(()=>{"use strict";const e=()=>{const e=[{title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this task",value:!1}],resolved:!1}];return{name:"New Project",taskList:e,addTask:()=>{e.push({title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this task",value:!1}],resolved:!1})}}};let t;const n="Odin-Todo",s=()=>{localStorage.setItem(n,JSON.stringify(t)),console.log(t)},a=()=>{const n=e();t.push(n),s()},c=(e,t)=>{e.innerHTML="";const n=document.createElement("button");n.innerText="Back to Home",n.classList.add("back-button"),e.appendChild(n),n.addEventListener("click",(()=>{o(e),s()}));const a=document.createElement("h1");a.innerText=t.name,e.appendChild(a);const d=document.createElement("button");d.innerText="Rename Project",d.classList.add("project-rename"),e.appendChild(d);const i=document.createElement("button");i.innerText="Create New Task",i.classList.add("create-button"),e.appendChild(i),i.addEventListener("click",(()=>{t.addTask(),c(e,t)}));const l=document.createElement("ul");l.setAttribute("id","task-list"),e.appendChild(l),t.taskList.forEach((e=>{const t=document.createElement("li");t.classList.add("task");const n=document.createElement("div");n.classList.add("task-title"),n.innerText=e.title,t.append(n),l.appendChild(t)})),e.appendChild(l)},o=e=>{e.innerHTML="";const d=document.createElement("h1");d.innerText="TODO Lists",e.appendChild(d);const i=document.createElement("button");i.innerText="Create New Project",i.classList.add("create-button"),e.appendChild(i),i.addEventListener("click",(()=>{a(),o(e)}));const l=document.createElement("ul");l.setAttribute("id","project-list"),e.appendChild(l),t.forEach((n=>{const a=document.createElement("li");a.classList.add("project");const d=document.createElement("div");d.classList.add("project-title"),d.innerText=n.name,a.append(d);const i=document.createElement("div");i.classList.add("project-counter"),i.innerText=`${n.taskList.length} todos`,a.append(i);const r=document.createElement("button");r.classList.add("project-view"),r.innerText="View",a.append(r),r.addEventListener("click",(()=>{c(e,n)}));const p=document.createElement("button");p.classList.add("project-delete"),p.innerText="Delete",a.append(p),p.addEventListener("click",(()=>{(e=>{t=t.filter((t=>t!==e)),s()})(n),o(e)})),l.appendChild(a)})),e.appendChild(l);const r=document.createElement("button");r.classList.add("home-reset"),r.innerText="Reset all",e.append(r),r.addEventListener("click",(()=>{t=[],localStorage.setItem(n,JSON.stringify(null)),a(),o(e)}))};console.log("webpack compiled to main.js");const d=document.querySelector("#content");(()=>{const s=JSON.parse(localStorage.getItem(n));s&&0!==s.length?(t=[],s.forEach((n=>{t.push((t=>{const n=e();return n.name=t.name,n.taskList=[],t.taskList.forEach((e=>{n.taskList.push((e=>{const t={title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this task",value:!1}],resolved:!1};for(let n in e)t[n]=e[n];return t})(e))})),n})(n))}))):(console.log("initialize project list"),a()),console.table(t)})(),o(d),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,