(()=>{"use strict";const e=({title:e,desc:t,notes:n,dueDate:s,priority:a,checkList:d,resolved:c})=>({title:e,desc:t,notes:n,dueDate:s,priority:a,checkList:d,resolved:c}),t=(t,n)=>({name:t,taskList:n,addTask:()=>{const t=e({title:"New Task",desc:"A blank task",notes:"blank notes",dueDate:"set this somehow",priority:"none",checkList:[["sample checkbox",!0]],resolved:!1});n.push(t)},deleteTask:e=>{for(let t=0;t<n.length;t++)if(n[t]===e){n.splice(t,1);break}}});let n;const s="Odin-Todo",a=()=>{localStorage.setItem(s,JSON.stringify(n))},d=()=>{const e=t("New Project",[]);e.addTask(),n.push(e),a()},c=(e,t)=>{e.innerHTML="";const n=document.createElement("div");n.setAttribute("id","project-info"),e.appendChild(n);const s=document.createElement("button");s.innerText="Back to Home",s.classList.add("back-button"),n.appendChild(s),s.addEventListener("click",(()=>{p(e),a()}));const d=document.createElement("h1");d.innerText=t.name,n.appendChild(d);const l=document.createElement("button");l.innerText="Rename Project",l.classList.add("project-rename"),n.appendChild(l);const o=document.createElement("button");o.innerText="Create New Task",o.classList.add("create-button"),e.appendChild(o),o.addEventListener("click",(()=>{t.addTask(),a(),c(e,t)}));const r=document.createElement("ul");r.setAttribute("id","task-list"),e.appendChild(r),t.taskList.forEach((e=>{const n=document.createElement("li");r.appendChild(n),i(e,n,t)})),e.appendChild(r)},i=(e,t,n)=>{const s=l(e,t),a=document.createElement("button");return a.classList.add("mini-task-expand"),a.innerText=">",s.append(a),a.addEventListener("click",(()=>{t.innerHTML="",o(e,t,n)})),s},l=(e,t,n)=>{const s=document.createElement("div");s.classList.add("mini-task"),t.append(s);const a=document.createElement("div");a.classList.add("mini-task-title"),a.innerText=e.title,s.append(a);const d=document.createElement("div");return d.classList.add("mini-task-date"),d.innerText=e.dueDate,s.append(d),e.resolved?s.classList.add(r("none")):s.classList.add(r(e.priority)),s},o=(e,t,n)=>{const s=document.createElement("div");s.classList.add("full-task"),t.append(s);const d=l(e,s),c=document.createElement("button");c.classList.add("mini-task-expand"),c.innerText="^",d.append(c),c.addEventListener("click",(()=>{t.innerHTML="",i(e,t)}));const r=document.createElement("div");r.classList.add("full-task-details"),t.append(r);const p=document.createElement("div");p.classList.add("full-task-text"),p.innerText=e.desc,r.append(p);const m=document.createElement("div");m.classList.add("full-task-text"),m.innerText=e.notes,r.append(m);const u=document.createElement("div");u.classList.add("full-task-text"),e.resolved?u.innerText="Priority: none (resolved)":u.innerText=`Priority: ${e.priority}`,r.append(u);const k=document.createElement("ul");k.classList.add("full-task-list"),r.append(k),e.checkList.forEach((e=>{const t=document.createElement("li");t.classList.add("full-task-list-item"),k.append(t);const n=document.createElement("input");n.setAttribute("type","checkbox"),t.append(n);const s=document.createElement("p");s.innerText=e[0],t.append(s)}));const L=document.createElement("div");L.classList.add("full-task-button-row"),r.append(L);const E=document.createElement("button");E.classList.add("full-task-edit"),E.innerText="Edit Task",L.append(E),E.addEventListener("click",(()=>{e.copy()}));const T=document.createElement("button");T.classList.add("full-task-delete"),T.innerText="Delete Task",L.append(T),T.addEventListener("click",(()=>{t.remove(),n.deleteTask(e),a()}));const h=document.createElement("button");return h.classList.add("full-task-resolve"),h.innerText="Resolve Task",L.append(h),h.addEventListener("click",(()=>{e.resolved=!0,t.innerHTML="",o(e,t,n),a()})),s},r=e=>{switch(e){case"high":return"high-priority";case"medium":return"medium-priority";case"low":return"low-priority";default:return"no-priority"}},p=e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODO Lists",e.appendChild(t);const i=document.createElement("button");i.innerText="Create New Project",i.classList.add("create-button"),e.appendChild(i),i.addEventListener("click",(()=>{d(),p(e)}));const l=document.createElement("ul");l.setAttribute("id","project-list"),e.appendChild(l),n.forEach((t=>{const s=document.createElement("li");s.classList.add("project");const d=document.createElement("div");d.classList.add("project-title"),d.innerText=t.name,s.append(d);const i=document.createElement("div");i.classList.add("project-counter"),i.innerText=`${t.taskList.length} todos`,s.append(i);const o=document.createElement("button");o.classList.add("project-view"),o.innerText="View",s.append(o),o.addEventListener("click",(()=>{c(e,t)}));const r=document.createElement("button");r.classList.add("project-delete"),r.innerText="Delete",s.append(r),r.addEventListener("click",(()=>{(e=>{n=n.filter((t=>t!==e)),a()})(t),p(e)})),l.appendChild(s)})),e.appendChild(l);const o=document.createElement("button");o.classList.add("home-reset"),o.innerText="Reset all",e.append(o),o.addEventListener("click",(()=>{n=[],localStorage.setItem(s,JSON.stringify(null)),d(),p(e)}))};console.log("webpack compiled to main.js");const m=document.querySelector("#content");(()=>{const a=JSON.parse(localStorage.getItem(s));a&&0!==a.length?n=a.map((n=>(n=>{let s=n.taskList.map((t=>(t=>e(t))(t)));return t(n.name,s)})(n))):(console.log("initialize project list"),n=[],d()),console.table(n)})(),p(m),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,