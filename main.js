(()=>{"use strict";let e;const t="Odin-Todo",n=()=>e;console.log("webpack compiled to main.js");const o=document.querySelector("#content");e=[],localStorage.setItem(t,JSON.stringify(null)),(()=>{const n=JSON.parse(localStorage.getItem(t));if(console.log(n),n&&0!==n.length){e=[];for(let t in n)e.push(n.prop)}else e=[{name:"New Project",taskList:[{title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this taks",value:!1}],resolved:!1}]}],localStorage.setItem(t,JSON.stringify(e)),console.log(e)})(),(e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODOLists",e.appendChild(t);const o=document.createElement("button");o.innerText="Create New Project",o.classList.add("create-button"),e.appendChild(o);const s=document.createElement("ul");s.setAttribute("id","project-list"),e.appendChild(s);const c=n();console.log("project list for homepage: "+c),c.forEach((e=>{console.log(e);const t=document.createElement("li");t.classList.add("project");const n=document.createElement("div");n.classList.add("project-title"),n.innerText=e.name,t.append(n);const o=document.createElement("div");o.classList.add("project-counter"),o.innerText=`${e.taskList.length} todos`,t.append(o);const c=document.createElement("button");c.classList.add("project-view"),c.innerText="View",t.append(c);const l=document.createElement("button");l.classList.add("project-delete"),l.innerText="Delete",t.append(l),s.appendChild(t)})),e.appendChild(s)})(o),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,