(()=>{"use strict";let e;const t="Odin-Todo",n=()=>{localStorage.setItem(t,JSON.stringify(e)),console.log(e)},s=()=>{const t=(()=>{const e=[{title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this taks",value:!1}],resolved:!1}];return{name:"New Project",taskList:e,addTask:()=>{e.push({title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this taks",value:!1}],resolved:!1})}}})();e.push(t),n()},a=(e,t)=>{e.innerHTML="";const s=document.createElement("button");s.innerText="Back to Home",s.classList.add("back-button"),e.appendChild(s),s.addEventListener("click",(()=>{c(e),n()}));const d=document.createElement("h1");d.innerText=t.name,e.appendChild(d);const o=document.createElement("button");o.innerText="Rename Project",o.classList.add("project-rename"),e.appendChild(o);const l=document.createElement("button");l.innerText="Create New Task",l.classList.add("create-button"),e.appendChild(l),l.addEventListener("click",(()=>{t.addTask(),a(e,t)}));const i=document.createElement("ul");i.setAttribute("id","task-list"),e.appendChild(i),t.taskList.forEach((e=>{const t=document.createElement("li");t.classList.add("task");const n=document.createElement("div");n.classList.add("task-title"),n.innerText=e.title,t.append(n),i.appendChild(t)})),e.appendChild(i)},c=n=>{n.innerHTML="";const d=document.createElement("h1");d.innerText="TODO Lists",n.appendChild(d);const o=document.createElement("button");o.innerText="Create New Project",o.classList.add("create-button"),n.appendChild(o),o.addEventListener("click",(()=>{s(),c(n)}));const l=document.createElement("ul");l.setAttribute("id","project-list"),n.appendChild(l),e.forEach((e=>{const t=document.createElement("li");t.classList.add("project");const s=document.createElement("div");s.classList.add("project-title"),s.innerText=e.name,t.append(s);const c=document.createElement("div");c.classList.add("project-counter"),c.innerText=`${e.taskList.length} todos`,t.append(c);const d=document.createElement("button");d.classList.add("project-view"),d.innerText="View",t.append(d),d.addEventListener("click",(()=>{a(n,e)}));const o=document.createElement("button");o.classList.add("project-delete"),o.innerText="Delete",t.append(o),l.appendChild(t)})),n.appendChild(l);const i=document.createElement("button");i.classList.add("home-reset"),i.innerText="Reset all",n.append(i),i.addEventListener("click",(()=>{e=[],localStorage.setItem(t,JSON.stringify(null)),s(),c(n)}))};console.log("webpack compiled to main.js");const d=document.querySelector("#content");(()=>{const n=JSON.parse(localStorage.getItem(t));console.log(n),e=n,0===e.length&&(console.log("initialize project list"),s())})(),c(d),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3RvcmFnZU1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdE9iak1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdGFza09iak1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdFBhZ2VNb2R1bGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2hvbWVQYWdlTW9kdWxlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm9qZWN0TGlzdCIsInN0b3JhZ2VOYW1lIiwic3RvcmVQcm9qZWN0TGlzdCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiY29uc29sZSIsImxvZyIsImNyZWF0ZU5ld1Byb2plY3QiLCJwIiwidGFza0xpc3QiLCJ0aXRsZSIsImRlc2MiLCJub3RlcyIsImR1ZURhdGUiLCJwcmlvcml0eSIsImNoZWNrbGlzdCIsIm5hbWUiLCJ2YWx1ZSIsInJlc29sdmVkIiwiYWRkVGFzayIsInB1c2giLCJwcm9qZWN0RmFjdG9yeSIsImxvYWRQcm9qZWN0IiwiY29udGVudCIsInByb2plY3QiLCJpbm5lckhUTUwiLCJiYWNrZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lclRleHQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2FkSG9tZSIsImgxIiwicHJvamVjdE5hbWVyIiwiY3JlYXRlciIsInVMaXN0Iiwic2V0QXR0cmlidXRlIiwiZm9yRWFjaCIsInQiLCJpdGVtIiwicFRpdGxlIiwiYXBwZW5kIiwicFRhc2tzIiwibGVuZ3RoIiwicFZpZXciLCJwRGVsZXRlIiwicmVzZXRlciIsInF1ZXJ5U2VsZWN0b3IiLCJsb2NhbE9iaiIsInBhcnNlIiwiZ2V0SXRlbSIs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ZixVQUFVQyxJQUFJLG1CQUNyQmMsRUFBT2hCLFVBQVksR0FBR3JCLEVBQUVDLFNBQVNxQyxlQUNqQ0osRUFBS0UsT0FBT0MsR0FHWixNQUFNRSxFQUFRcEIsU0FBU0MsY0FBYyxVQUNyQ21CLEVBQU1qQixVQUFVQyxJQUFJLGdCQUNwQmdCLEVBQU1sQixVQUFZLE9BQ2xCYSxFQUFLRSxPQUFPRyxHQUNaQSxFQUFNZCxpQkFBaUIsU0FBUyxLQUM5QlgsRUFBWUMsRUFBU2YsTUFLdkIsTUFBTXdDLEVBQVVyQixTQUFTQyxjQUFjLFVBQ3ZDb0IsRUFBUWxCLFVBQVVDLElBQUksa0JBQ3RCaUIsRUFBUW5CLFVBQVksU0FDcEJhLEVBQUtFLE9BQU9JLEdBSVpWLEVBQU1OLFlBQVlVLE1BSXBCbkIsRUFBUVMsWUFBWU0sR0FHcEIsTUFBTVcsRUFBVXRCLFNBQVNDLGNBQWMsVUFDdkNxQixFQUFRbkIsVUFBVUMsSUFBSSxjQUN0QmtCLEVBQVFwQixVQUFZLFlBQ3BCTixFQUFRcUIsT0FBT0ssR0FDZkEsRUFBUWhCLGlCQUFpQixTQUFTLEtKL0VsQ25DLEVBQWMsR0FDZEcsYUFBYUMsUUFBUUgsRUFBYUksS0FBS0MsVUFBVSxPSWdGL0NHLElBQ0EyQixFQUFTWCxPQzFHZmxCLFFBQVFDLElBQUksK0JBRVosTUFBTWlCLEVBQVVJLFNBQVN1QixjQUFjLFlMRGYsTUFDcEIsTUFBTUMsRUFBV2hELEtBQUtpRCxNQUFNbkQsYUFBYW9ELFFBQVF0RCxJQUNqRE0sUUFBUUMsSUFBSTZDLEdBR1pyRCxFQUFjcUQsRUFHWSxJQUF2QnJELEVBQVlnRCxTQUNYekMsUUFBUUMsSUFBSSwyQkFDWkMsTUtOUitDLEdBRUFwQixFQUFTWCxHQUNUbEIsUUFBUUMsSUFBSSxpQiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtwcm9qZWN0RmFjdG9yeX0gZnJvbSBcIi4vcHJvamVjdE9iak1vZHVsZVwiO1xuXG5cbi8vaG9sZCB0aGUgcHJvamVjdCBsaXN0IGFuZCBoYW5kbGUgbG9jYWxzdG9yYWdlIGZ1bmN0aW9uc1xubGV0IHByb2plY3RMaXN0O1xuY29uc3Qgc3RvcmFnZU5hbWUgPSAnT2Rpbi1Ub2RvJztcblxuLy9sb2FkIHRoZSBwcm9qZWN0IGxpc3QgZnJvbSBsb2NhbCBzdG9yYWdlXG5jb25zdCBsb2FkUHJvamVjdExpc3QgPSAoKSA9PntcbiAgICBjb25zdCBsb2NhbE9iaiA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmFnZU5hbWUpKTtcbiAgICBjb25zb2xlLmxvZyhsb2NhbE9iaik7XG5cbiAgICAvL3RyeSB0byBsb2FkIGZyb20gc3RvcmFnZVxuICAgIHByb2plY3RMaXN0ID0gbG9jYWxPYmo7XG5cbiAgICAvL2lmIG5vIHJlc3VsdHMgZm91bmQsIGNyZWF0ZSBhIGRlZmF1bHQgb25lXG4gICAgaWYocHJvamVjdExpc3QubGVuZ3RoID09PSAwKXtcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXRpYWxpemUgcHJvamVjdCBsaXN0Jyk7XG4gICAgICAgIGNyZWF0ZU5ld1Byb2plY3QoKTtcbiAgICB9XG5cbn1cblxuLy9zdG9yZSB0aGUgcHJvamVjdCBsaXN0IGluIGxvY2FsIHN0b3JhZ2VcbmNvbnN0IHN0b3JlUHJvamVjdExpc3QgPSAoKSA9PntcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlTmFtZSwgSlNPTi5zdHJpbmdpZnkocHJvamVjdExpc3QpKTtcbiAgICBjb25zb2xlLmxvZyhwcm9qZWN0TGlzdCk7XG59XG5cbi8vcmVzZXQgdGhlIGxvY2FsIHN0b3JhZ2VcbmNvbnN0IHJlc2V0U3RvcmFnZSA9ICgpID0+e1xuICAgIHByb2plY3RMaXN0ID0gW107XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZU5hbWUsIEpTT04uc3RyaW5naWZ5KG51bGwpKTtcbiAgICAvL3RvZG86IHVwZGF0ZSBVSSBvciBsZXQgY2FsbGVyIGRvIGl0XG59XG5cbi8vbGV0IHRoZSBwcm9qZWN0IGhhdmUgYWNjZXNzIHRvIHByb2plY3QgbGlzdFxuY29uc3QgZ2V0UHJvamVjdExpc3QgPSAoKSA9PntcbiAgICByZXR1cm4gcHJvamVjdExpc3Q7XG59XG5cbi8vYWRkIGEgYmxhbmsgcHJvamVjdCB0byB0aGUgbGlzdFxuY29uc3QgY3JlYXRlTmV3UHJvamVjdCA9ICgpID0+e1xuICAgIGNvbnN0IHAgPSBwcm9qZWN0RmFjdG9yeSgpO1xuICAgIHByb2plY3RMaXN0LnB1c2gocCk7XG4gICAgc3RvcmVQcm9qZWN0TGlzdCgpO1xufVxuXG5leHBvcnQge2xvYWRQcm9qZWN0TGlzdCwgc3RvcmVQcm9qZWN0TGlzdCwgcmVzZXRTdG9yYWdlLCBnZXRQcm9qZWN0TGlzdCwgY3JlYXRlTmV3UHJvamVjdH07XG4iLCJpbXBvcnQgeyB0YXNrRmFjdG9yeSB9IGZyb20gXCIuL3Rhc2tPYmpNb2R1bGVcIjtcblxuLy9jb25zdHJ1Y3RvciBhbmQgaGVscGVyIGZ1bmN0aW9ucyBmb3IgcHJvamVjdCBvYmplY3RzXG5jb25zdCBwcm9qZWN0RmFjdG9yeSA9ICgpID0+e1xuICAgIGNvbnN0IHRhc2tMaXN0ID0gW3Rhc2tGYWN0b3J5KCldO1xuICAgIGxldCBuYW1lID0gXCJOZXcgUHJvamVjdFwiO1xuXG4gICAgY29uc3QgYWRkVGFzayA9ICgpPT57XG4gICAgICAgIHRhc2tMaXN0LnB1c2godGFza0ZhY3RvcnkoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtuYW1lLCB0YXNrTGlzdCwgYWRkVGFza307XG59XG5cbmV4cG9ydCB7cHJvamVjdEZhY3Rvcnl9OyIsIi8vY29uc3RydWN0b3IgYW5kIGhlbHBlciBmdW5jdGlvbnMgZm9yIHRhc2svdG9kbyBvYmplY3RzXG5pbXBvcnQge2Zvcm1hdH0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5jb25zdCB0YXNrRmFjdG9yeSA9ICgpID0+e1xuICAgIGNvbnN0IHRpdGxlID0gJ05ldyBUYXNrJztcbiAgICBjb25zdCBkZXNjID0gJ0EgZGVmYXVsdCB0YXNrIHRlbXBsYXRlJztcbiAgICBjb25zdCBub3RlcyA9ICdibGFuayBub3Rlcyc7XG4gICAgY29uc3QgZHVlRGF0ZSA9ICdzZXQgdGhpcyBzb21laG93JztcbiAgICBjb25zdCBwcmlvcml0eSA9IDA7XG4gICAgY29uc3QgY2hlY2tsaXN0ID0gW3tuYW1lOidlZGl0IHRoaXMgdGFrcycsIHZhbHVlOmZhbHNlfV07XG4gICAgY29uc3QgcmVzb2x2ZWQgPSBmYWxzZTtcblxuICAgIHJldHVybiB7dGl0bGUsIGRlc2MsIG5vdGVzLCBkdWVEYXRlLCBwcmlvcml0eSwgY2hlY2tsaXN0LCByZXNvbHZlZH07XG59XG5cbmV4cG9ydCB7dGFza0ZhY3Rvcnl9OyIsImltcG9ydCB7IGxvYWRIb21lIH0gZnJvbSBcIi4vaG9tZVBhZ2VNb2R1bGVcIjtcbmltcG9ydCB7IHN0b3JlUHJvamVjdExpc3QgfSBmcm9tIFwiLi9zdG9yYWdlTW9kdWxlXCI7XG5cbi8vbW9kdWxlIGZvciBkaXNwbGF5aW5nIHRhc2tzIHdpdGhpbiBhIHByb2plY3RcblxuLy9zYW1wbGUgaHRtbCBzdHJ1Y3R1cmUgZm9yIHBhZ2VcbmNvbnN0IGh0bWxDb250ZW50PWA8ZGl2IGlkPVwiaGVhZGVyXCI+XG48ZGl2PkJhY2s8L2Rpdj5cbjxoMT5Qcm9qZWN0IE5hbWU8L2gxPlxuPGRpdj5SZW5hbWU8L2Rpdj5cbjwvZGl2PlxuPGRpdiBjbGFzcz1cImNyZWF0ZS1idXR0b25cIj5DcmVhdGUgTmV3IFRhc2s8L2Rpdj5cbjx1bCBpZD1cInRhc2stbGlzdFwiPlxuPGxpIGNsYXNzPVwidGFza1wiPlxuICA8ZGl2IGNsYXNzID1cInRhc2stbWluaW1pemVcIj5ePC9kaXY+XG4gIDxkaXY+dXBkYXRlPC9kaXY+XG4gIDxkaXYgY2xhc3MgPVwidGFzay10aXRsZVwiPlRhc2sgMTwvZGl2PlxuICA8ZGl2IGNsYXNzID1cInRhc2stZGVzY1wiPk9uZSB0YXNrIGRlc2NyaXB0aW9uPC9kaXY+XG4gIDxkaXY+ZWRpdCBkZXRhaWxzPC9kaXY+XG4gIDxkaXY+YWRkaXRpb25hbCBub3RlczwvZGl2PlxuICA8ZGl2PmRlbGV0ZTwvZGl2PlxuICA8ZGl2PnByaW9yaXR5PC9kaXY+XG4gIDxkaXY+ZGVhZGxpbmU8L2Rpdj5cbiAgPGRpdj5hZGQgdG8gY2hlY2tsaXN0PC9kaXY+XG4gIDxsaSBjbGFzcyA9XCJjaGVjay1saXN0XCI+XG4gICAgPHVsPmNoZWNrMTwvdWw+XG4gICAgPHVsPmNoZWNrMjwvdWw+XG4gIDwvbGk+XG48L2xpPlxuPC91bD5gO1xuXG4vL3VzZSB0aGUgY3VycmVudCBwcm9qZWN0IHRvIGFzc2VtYmxlIGFuIGh0bWwgcGFnZVxuY29uc3QgbG9hZFByb2plY3QgPSAoY29udGVudCwgcHJvamVjdCkgPT57XG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJyc7XG5cbiAgLy9iYWNrIGJ1dHRvblxuICBjb25zdCBiYWNrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYmFja2VyLmlubmVyVGV4dCA9ICdCYWNrIHRvIEhvbWUnO1xuICBiYWNrZXIuY2xhc3NMaXN0LmFkZCgnYmFjay1idXR0b24nKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChiYWNrZXIpO1xuICBiYWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntcbiAgICBsb2FkSG9tZShjb250ZW50KTtcbiAgICBzdG9yZVByb2plY3RMaXN0KCk7XG4gIH0pXG5cbiAgLy9oMVxuICBjb25zdCBoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gIGgxLmlubmVyVGV4dCA9IHByb2plY3QubmFtZTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChoMSk7XG5cbiAgLy9yZW5hbWUgYnV0dG9uXG4gIGNvbnN0IHByb2plY3ROYW1lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBwcm9qZWN0TmFtZXIuaW5uZXJUZXh0ID0gJ1JlbmFtZSBQcm9qZWN0JztcbiAgcHJvamVjdE5hbWVyLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtcmVuYW1lJyk7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJvamVjdE5hbWVyKTtcbiAgLy90b2RvOiBhZGQgZXZlbnQgbGlzdGVuZXIgdG8gcmVuYW1lIHByb2plY3RcblxuICAvL2NyZWF0ZSBidXR0b25cbiAgY29uc3QgY3JlYXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBjcmVhdGVyLmlubmVyVGV4dCA9ICdDcmVhdGUgTmV3IFRhc2snO1xuICBjcmVhdGVyLmNsYXNzTGlzdC5hZGQoJ2NyZWF0ZS1idXR0b24nKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChjcmVhdGVyKTtcbiAgLy90b2RvOiBmaXggbG9hZGluZyBvYmplY3RzIGZyb20gbG9jYWxTdG9yYWdlXG4gIGNyZWF0ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgIHByb2plY3QuYWRkVGFzaygpO1xuICAgIGxvYWRQcm9qZWN0KGNvbnRlbnQsIHByb2plY3QpO1xuICB9KTtcblxuICAvL3VsXG4gIGNvbnN0IHVMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgdUxpc3Quc2V0QXR0cmlidXRlKCdpZCcsICd0YXNrLWxpc3QnKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZCh1TGlzdCk7XG5cbiAgLy9saSBlbGVtZW50c1xuICBjb25zdCB0YXNrTGlzdCA9IHByb2plY3QudGFza0xpc3Q7XG4gIC8vY29uc29sZS5sb2cocHJvamVjdExpc3QpO1xuICB0YXNrTGlzdC5mb3JFYWNoKHQgPT4ge1xuICAgIC8vY29uc29sZS5sb2cocCk7XG4gICAgLy9saSBlbGVtZW50XG4gICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgaXRlbS5jbGFzc0xpc3QuYWRkKCd0YXNrJyk7XG5cbiAgICAvL3RpdGxlXG4gICAgY29uc3QgcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcFRpdGxlLmNsYXNzTGlzdC5hZGQoJ3Rhc2stdGl0bGUnKTtcbiAgICBwVGl0bGUuaW5uZXJUZXh0ID0gdC50aXRsZTtcbiAgICBpdGVtLmFwcGVuZChwVGl0bGUpO1xuICAgIC8vdG9kbzogYWRkIGEgd2F5IHRvIGNoYW5nZSB0aGUgdGl0bGUgKHByb2JhYmx5IGEgcHJvbXB0KVxuXG4gICAgLy9hcHBlbmQgdG8gbGlzdFxuICAgIHVMaXN0LmFwcGVuZENoaWxkKGl0ZW0pO1xuICB9KTtcblxuICAvL2FwcGVuZCBsaXN0IHRvIGNvbnRlbnRcbiAgY29udGVudC5hcHBlbmRDaGlsZCh1TGlzdCk7XG59XG5cbmV4cG9ydCB7bG9hZFByb2plY3R9OyIsImltcG9ydCB7bG9hZFByb2plY3RMaXN0LCBzdG9yZVByb2plY3RMaXN0LCByZXNldFN0b3JhZ2UsIGdldFByb2plY3RMaXN0LCBjcmVhdGVOZXdQcm9qZWN0fSBmcm9tIFwiLi9zdG9yYWdlTW9kdWxlXCI7XG5pbXBvcnQgeyBsb2FkUHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3RQYWdlTW9kdWxlXCI7XG5cbi8vbW9kdWxlIGZvciBkaXNwbGF5aW5nIHByb2plY3RzIG9uIGEgbWFpbiBwYWdlXG5cbi8vc2FtZXBsZSBodG1sIHN0cnVjdHVyZVxuY29uc3QgaHRtbENvbnRlbnQ9YDxoMT5UT0RPIExpc3RzPC9oMT5cbjxkaXYgY2xhc3M9XCJjcmVhdGUtYnV0dG9uXCI+Q3JlYXRlIE5ldyBQcm9qZWN0PC9kaXY+XG48dWwgaWQ9XCJwcm9qZWN0LWxpc3RcIj5cbiAgPGxpIGNsYXNzPVwicHJvamVjdFwiPlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC10aXRsZVwiPlByb2plY3QgMTwvZGl2PlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC1jb3VudGVyXCI+MjIgdG9kb3M8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3Qtdmlld1wiPlZpZXc8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtZGVsZXRlXCI+RGVsZXRlPC9kaXY+XG4gIDwvbGk+XG4gIDxsaSBjbGFzcz1cInByb2plY3RcIj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtdGl0bGVcIj5Qcm9qZWN0IDE8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtY291bnRlclwiPjIyIHRvZG9zPC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LXZpZXdcIj5WaWV3PC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LWRlbGV0ZVwiPkRlbGV0ZTwvZGl2PlxuICA8L2xpPlxuICA8bGkgY2xhc3M9XCJwcm9qZWN0XCI+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LXRpdGxlXCI+UHJvamVjdCAxPC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LWNvdW50ZXJcIj4yMiB0b2RvczwvZGl2PlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC12aWV3XCI+VmlldzwvZGl2PlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC1kZWxldGVcIj5EZWxldGU8L2Rpdj5cbiAgPC9saT5cbiAgPGxpIGNsYXNzPVwicHJvamVjdFwiPlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC10aXRsZVwiPlByb2plY3QgMTwvZGl2PlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC1jb3VudGVyXCI+MjIgdG9kb3M8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3Qtdmlld1wiPlZpZXc8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtZGVsZXRlXCI+RGVsZXRlPC9kaXY+XG4gIDwvbGk+XG48L3VsPmA7XG5cbi8vZ2V0IHRoZSBjdXJyZW50IHByb2plY3QgbGlzdCBhbmQgYXNzZW1ibGUgYW4gaHRtbCBwYWdlXG5jb25zdCBsb2FkSG9tZSA9IGNvbnRlbnQgPT57XG4gICAgY29udGVudC5pbm5lckhUTUwgPSAnJztcblxuICAgIC8vaDFcbiAgICBjb25zdCBoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gICAgaDEuaW5uZXJUZXh0ID0gJ1RPRE8gTGlzdHMnO1xuICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoaDEpO1xuXG4gICAgLy9idXR0b25cbiAgICBjb25zdCBjcmVhdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgY3JlYXRlci5pbm5lclRleHQgPSAnQ3JlYXRlIE5ldyBQcm9qZWN0JztcbiAgICBjcmVhdGVyLmNsYXNzTGlzdC5hZGQoJ2NyZWF0ZS1idXR0b24nKTtcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKGNyZWF0ZXIpO1xuICAgIGNyZWF0ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgY3JlYXRlTmV3UHJvamVjdCgpO1xuICAgICAgbG9hZEhvbWUoY29udGVudCk7XG4gICAgfSk7XG5cbiAgICAvL3VsXG4gICAgY29uc3QgdUxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIHVMaXN0LnNldEF0dHJpYnV0ZSgnaWQnLCAncHJvamVjdC1saXN0Jyk7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZCh1TGlzdCk7XG5cbiAgICAvL2xpIGVsZW1lbnRzXG4gICAgY29uc3QgcHJvamVjdExpc3QgPSBnZXRQcm9qZWN0TGlzdCgpO1xuICAgIC8vY29uc29sZS5sb2cocHJvamVjdExpc3QpO1xuICAgIHByb2plY3RMaXN0LmZvckVhY2gocCA9PiB7XG4gICAgICAvL2NvbnNvbGUubG9nKHApO1xuICAgICAgLy9saSBlbGVtZW50XG4gICAgICBjb25zdCBpdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgncHJvamVjdCcpO1xuXG4gICAgICAvL3RpdGxlXG4gICAgICBjb25zdCBwVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHBUaXRsZS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXRpdGxlJyk7XG4gICAgICBwVGl0bGUuaW5uZXJUZXh0ID0gcC5uYW1lO1xuICAgICAgaXRlbS5hcHBlbmQocFRpdGxlKTtcbiAgICAgIC8vdG9kbzogYWRkIGEgd2F5IHRvIGNoYW5nZSB0aGUgdGl0bGUgKHdpdGhpbiB0aGUgcHJvamVjdCwgbm90IGhlcmUpXG5cbiAgICAgIC8vdGFzayBjb3VudFxuICAgICAgY29uc3QgcFRhc2tzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIHBUYXNrcy5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWNvdW50ZXInKTtcbiAgICAgIHBUYXNrcy5pbm5lclRleHQgPSBgJHtwLnRhc2tMaXN0Lmxlbmd0aH0gdG9kb3NgO1xuICAgICAgaXRlbS5hcHBlbmQocFRhc2tzKTtcblxuICAgICAgLy92aWV3XG4gICAgICBjb25zdCBwVmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgICBwVmlldy5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXZpZXcnKTtcbiAgICAgIHBWaWV3LmlubmVyVGV4dCA9ICdWaWV3JztcbiAgICAgIGl0ZW0uYXBwZW5kKHBWaWV3KTtcbiAgICAgIHBWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgbG9hZFByb2plY3QoY29udGVudCwgcCk7XG4gICAgICB9KTtcblxuICAgICAgLy90b2RvOiBkZXRlcm1pbmUgaWYgdGhpcyBidXR0b24gc2hvdWxkIGV4aXN0XG4gICAgICAvL2RlbGV0ZSBcbiAgICAgIGNvbnN0IHBEZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgcERlbGV0ZS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWRlbGV0ZScpO1xuICAgICAgcERlbGV0ZS5pbm5lclRleHQgPSAnRGVsZXRlJztcbiAgICAgIGl0ZW0uYXBwZW5kKHBEZWxldGUpO1xuICAgICAgLy90b2RvOiBhZGQgZXZlbnQgbGlzdGVuZXIgdG8gZGVsZXRlIHRoZSBwcm9qZWN0XG5cbiAgICAgIC8vYXBwZW5kIHRvIGxpc3RcbiAgICAgIHVMaXN0LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgIH0pO1xuXG4gICAgLy9hcHBlbmQgbGlzdCB0byBjb250ZW50XG4gICAgY29udGVudC5hcHBlbmRDaGlsZCh1TGlzdCk7XG5cbiAgICAvL2EgcmVzZXQgYnV0dG9uXG4gICAgY29uc3QgcmVzZXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgcmVzZXRlci5jbGFzc0xpc3QuYWRkKCdob21lLXJlc2V0Jyk7XG4gICAgcmVzZXRlci5pbm5lclRleHQgPSAnUmVzZXQgYWxsJztcbiAgICBjb250ZW50LmFwcGVuZChyZXNldGVyKTtcbiAgICByZXNldGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgIHJlc2V0U3RvcmFnZSgpO1xuICAgICAgY3JlYXRlTmV3UHJvamVjdCgpO1xuICAgICAgbG9hZEhvbWUoY29udGVudCk7XG4gICAgfSlcbn1cblxuZXhwb3J0IHtsb2FkSG9tZX07IiwiaW1wb3J0IHtsb2FkSG9tZX0gZnJvbSBcIi4vaG9tZVBhZ2VNb2R1bGUuanNcIjtcbmltcG9ydCB7cHJvamVjdEZhY3Rvcnl9IGZyb20gXCIuL3Byb2plY3RPYmpNb2R1bGUuanNcIjtcbmltcG9ydCB7bG9hZFByb2plY3R9IGZyb20gXCIuL3Byb2plY3RQYWdlTW9kdWxlLmpzXCI7XG5pbXBvcnQge3Rhc2tGYWN0b3J5fSBmcm9tIFwiLi90YXNrT2JqTW9kdWxlXCI7XG5pbXBvcnQge2xvYWRQcm9qZWN0TGlzdCwgc3RvcmVQcm9qZWN0TGlzdCwgcmVzZXRTdG9yYWdlfSBmcm9tIFwiLi9zdG9yYWdlTW9kdWxlXCJcblxuLy90ZXN0IHRoYXQgd2VicGFjayB3b3Jrc1xuY29uc29sZS5sb2coJ3dlYnBhY2sgY29tcGlsZWQgdG8gbWFpbi5qcycpO1xuXG5jb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKTtcblxuLy9yZXNldFN0b3JhZ2UoKTsgLy90b2RvOiByZW1vdmUgdGhpcyByZXNldFxubG9hZFByb2plY3RMaXN0KCk7XG5cbmxvYWRIb21lKGNvbnRlbnQpO1xuY29uc29sZS5sb2coJ2VuZCBvZiBpbmRleCcpO1xuXG4iXSwic291cmNlUm9vdCI6IiJ9