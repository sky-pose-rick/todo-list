(()=>{"use strict";const e=({title:t,desc:n,notes:c,dueDate:a,priority:s,checklist:d,resolved:i})=>({title:t,desc:n,notes:c,dueDate:a,priority:s,checklist:d,resolved:i,copy:()=>{const a=d.map((e=>[e[0],e[1]]));return e({title:t,desc:n,notes:c,dueDate:"bad for now",priority:s,checklist:a,resolved:i})}}),t=(t,n)=>({name:t,taskList:n,addTask:()=>{const t=e({title:"New Task",desc:"A blank task",notes:"blank notes",dueDate:"set this somehow",priority:"none",checklist:[["sample checkbox",!1]],resolved:!1});n.push(t)},deleteTask:e=>{for(let t=0;t<n.length;t++)if(n[t]===e){n.splice(t,1);break}}});let n;const c="Odin-Todo",a=()=>{localStorage.setItem(c,JSON.stringify(n))},s=()=>{const e=t("New Project",[]);e.addTask(),n.push(e),a()},d=(e,t)=>{const n=document.createElement("li"),c=document.createElement("input");n.append(c),c.setAttribute("value",e),c.setAttribute("data-checked",t);const a=document.createElement("button");return n.append(a),a.innerText="Remove",a.addEventListener("click",(()=>{n.remove()})),n},i=(e,t,n,c)=>{const a=document.createElement("div");e.append(a);const s=document.createElement("label");s.innerText=t,a.append(s);const d=document.createElement(n);return a.append(d),c(d,s)},l=(e,t)=>({elem:e,label:t,setValue:t=>{e.setAttribute("value",t)},getValue:()=>e.value}),o=(e,t)=>({elem:e,label:t,setValue:t=>{e.innerText=t},getValue:()=>e.value}),r=(e,t)=>({elem:e,label:t,setValue:t=>{[...e.children].find((e=>e.value===t)).toggleAttribute("selected")},getValue:()=>e.value}),u=(e,t)=>{e.innerHTML="";const n=document.createElement("div");n.setAttribute("id","project-info"),e.appendChild(n);const c=document.createElement("button");c.innerText="Back to Home",c.classList.add("back-button"),n.appendChild(c),c.addEventListener("click",(()=>{v(e)}));const s=document.createElement("h1");s.innerText=t.name,n.appendChild(s);const d=document.createElement("button");d.innerText="Rename Project",d.classList.add("project-rename"),n.appendChild(d),d.addEventListener("click",(()=>{const e=prompt("New project name?");e&&(t.name=e,s.innerText=e,a())}));const i=document.createElement("button");i.innerText="Create New Task",i.classList.add("create-button"),e.appendChild(i),i.addEventListener("click",(()=>{t.addTask(),a(),u(e,t)}));const l=document.createElement("ul");l.setAttribute("id","task-list"),e.appendChild(l);const o=t.taskList,r={content:e,project:t};o.forEach((e=>{const t=document.createElement("li");l.appendChild(t),p(e,t,r)})),e.appendChild(l)},p=(e,t,n)=>{const c=m(e,t),a=document.createElement("button");return a.classList.add("mini-task-expand"),a.innerText=">",c.append(a),a.addEventListener("click",(()=>{t.innerHTML="",k(e,t,n)})),c},m=(e,t)=>{const n=document.createElement("div");n.classList.add("mini-task"),t.append(n);const c=document.createElement("div");c.classList.add("mini-task-title"),c.innerText=e.title,n.append(c);const a=document.createElement("div");return a.classList.add("mini-task-date"),a.innerText=e.dueDate,n.append(a),e.resolved?n.classList.add(E("none")):n.classList.add(E(e.priority)),n},k=(e,t,n)=>{const c=document.createElement("div");c.classList.add("full-task"),t.append(c);const s=m(e,c),E=document.createElement("button");E.classList.add("mini-task-expand"),E.innerText="^",s.append(E),E.addEventListener("click",(()=>{t.innerHTML="",p(e,t,n)}));const v=document.createElement("div");v.classList.add("full-task-details"),t.append(v);const L=document.createElement("div");L.classList.add("full-task-text"),L.innerText=e.desc,v.append(L);const h=document.createElement("div");h.classList.add("full-task-text"),h.innerText=e.notes,v.append(h);const T=document.createElement("div");T.classList.add("full-task-text"),e.resolved?T.innerText="Priority: none (resolved)":T.innerText=`Priority: ${e.priority}`,v.append(T);const b=document.createElement("ul");b.classList.add("full-task-list"),v.append(b),e.checklist.forEach((e=>{const t=document.createElement("li");t.classList.add("full-task-list-item"),b.append(t);const n=document.createElement("input");n.setAttribute("type","checkbox"),t.append(n),e[1]&&n.toggleAttribute("checked"),t.addEventListener("click",(()=>{e[1]=!e[1],a()}));const c=document.createElement("p");c.innerText=e[0],t.append(c)}));const x=document.createElement("div");x.classList.add("full-task-button-row"),v.append(x);const g=document.createElement("button");g.classList.add("full-task-edit"),g.innerText="Edit Task",x.append(g),g.addEventListener("click",(()=>{console.log(n),((e,t,n)=>{e.innerHTML="";const c=document.createElement("div");c.setAttribute("id","task-header"),e.append(c);const s=document.createElement("button");s.innerText="Back to Project",s.classList.add("back-button"),c.append(s),s.addEventListener("click",(()=>{u(e,t)}));const p=document.createElement("h1");p.innerText="Edit Task",c.appendChild(p);const m=document.createElement("div");m.setAttribute("id","task-container"),e.append(m);const k=i(m,"Title","input",l);k.setValue(n.title);const E=i(m,"Description","textarea",o);E.setValue(n.desc);const v=i(m,"Notes","textarea",o);v.setValue(n.notes);const L=(e,t,n)=>{const c=document.createElement("option");c.innerText=t,c.setAttribute("value",n),e.append(c)},h=i(m,"Priority","select",r);L(h.elem,"None","none"),L(h.elem,"Low","low"),L(h.elem,"Medium","medium"),L(h.elem,"High","high"),h.setValue(n.priority);const T=((e,t)=>{const n=document.createElement("div");e.append(n);const c=document.createElement("div");n.append(c),c.innerText="Checklist";const a=document.createElement("button");n.append(a),a.innerText="Add to Checklist";const s=document.createElement("ul");return n.append(s),a.addEventListener("click",(()=>{s.append(d("New Todo",0))})),t.checklist.forEach((e=>{s.append(d(e[0],e[1]))})),s})(m,n),b=document.createElement("button");b.innerText="Save Task",e.append(b),b.addEventListener("click",(()=>{n.title=k.getValue(),n.desc=E.getValue(),n.notes=v.getValue(),n.priority=h.getValue(),n.checklist=[],[...T.querySelectorAll("input")].forEach((e=>{const t="true"===e.getAttribute("data-checked");n.checklist.push([e.value,t]),console.log(t)})),a(),u(e,t)}))})(n.content,n.project,e)}));const f=document.createElement("button");f.classList.add("full-task-delete"),f.innerText="Delete Task",x.append(f),f.addEventListener("click",(()=>{t.remove(),n.project.deleteTask(e),a()}));const y=document.createElement("button");return y.classList.add("full-task-resolve"),y.innerText="Toggle Resolved",x.append(y),y.addEventListener("click",(()=>{e.resolved=!e.resolved,t.innerHTML="",k(e,t,n),a()})),c},E=e=>{switch(e){case"high":return"high-priority";case"medium":return"medium-priority";case"low":return"low-priority";default:return"no-priority"}},v=e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODO Lists",e.appendChild(t);const d=document.createElement("button");d.innerText="Create New Project",d.classList.add("create-button"),e.appendChild(d),d.addEventListener("click",(()=>{s(),v(e)}));const i=document.createElement("ul");i.setAttribute("id","project-list"),e.appendChild(i),n.forEach((t=>{const c=document.createElement("li");c.classList.add("project");const s=document.createElement("div");s.classList.add("project-title"),s.innerText=t.name,c.append(s);const d=document.createElement("div");d.classList.add("project-counter"),d.innerText=`${t.taskList.length} todos`,c.append(d);const l=document.createElement("button");l.classList.add("project-view"),l.innerText="View",c.append(l),l.addEventListener("click",(()=>{u(e,t)}));const o=document.createElement("button");o.classList.add("project-delete"),o.innerText="Delete",c.append(o),o.addEventListener("click",(()=>{(e=>{n=n.filter((t=>t!==e)),a()})(t),v(e)})),i.appendChild(c)})),e.appendChild(i);const l=document.createElement("button");l.classList.add("home-reset"),l.innerText="Reset all",e.append(l),l.addEventListener("click",(()=>{n=[],localStorage.setItem(c,JSON.stringify(null)),s(),v(e)}))};console.log("webpack compiled to main.js");const L=document.querySelector("#content");(()=>{const a=JSON.parse(localStorage.getItem(c));a&&0!==a.length?n=a.map((n=>(n=>{let c=n.taskList.map((t=>(t=>e(t))(t)));return t(n.name,c)})(n))):(console.log("initialize project list"),n=[],s()),console.table(n)})(),v(L),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,