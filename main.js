(()=>{"use strict";let e;const t="Odin-Todo";console.log("webpack compiled to main.js"),document.querySelector("#content").innerHTML='<h1>TODO Lists</h1>\n<div class="create-button">Create New Project</div>\n<ul id="project-list">\n  <li class="project">\n    <div class ="project-title">Project 1</div>\n    <div class ="project-counter">22 todos</div>\n    <div class ="project-view">View</div>\n    <div class ="project-delete">Delete</div>\n  </li>\n  <li class="project">\n    <div class ="project-title">Project 1</div>\n    <div class ="project-counter">22 todos</div>\n    <div class ="project-view">View</div>\n    <div class ="project-delete">Delete</div>\n  </li>\n  <li class="project">\n    <div class ="project-title">Project 1</div>\n    <div class ="project-counter">22 todos</div>\n    <div class ="project-view">View</div>\n    <div class ="project-delete">Delete</div>\n  </li>\n  <li class="project">\n    <div class ="project-title">Project 1</div>\n    <div class ="project-counter">22 todos</div>\n    <div class ="project-view">View</div>\n    <div class ="project-delete">Delete</div>\n  </li>\n</ul>',(()=>{const s=JSON.parse(localStorage.getItem(t));if(console.log(s),s&&0!==s.length){e=[];for(let t in s)e.push(s.prop)}else e=[{taskList:[{title:"New Task",desc:"A default task template",notes:"blank notes",dueDate:"set this somehow",priority:0,checklist:[{name:"edit this taks",value:!1}],resolved:!1}]}],localStorage.setItem(t,JSON.stringify(e))})(),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3RvcmFnZU1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2hvbWVQYWdlTW9kdWxlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9wcm9qZWN0T2JqTW9kdWxlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy90YXNrT2JqTW9kdWxlLmpzIl0sIm5hbWVzIjpbInByb2plY3RMaXN0Iiwic3RvcmFnZU5hbWUiLCJjb25zb2xlIiwibG9nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwibG9jYWxPYmoiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibGVuZ3RoIiwicHJvcCIsInB1c2giLCJ0YXNrTGlzdCIsInRpdGxlIiwiZGVzYyIsIm5vdGVzIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwiY2hlY2tsaXN0IiwibmFtZSIsInZhbHVlIiwicmVzb2x2ZWQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZmV0Y2hQcm9qZWN0TGlzdCJdLCJtYXBwaW5ncyI6Im1CQUlBLElBQUlBLEVBQ0osTUFBTUMsRUFBYyxZQ0VwQkMsUUFBUUMsSUFBSSwrQkFFSUMsU0FBU0MsY0FBYyxZQ3NCM0JDLFVBOUJNLGsrQkZPTyxNQUNyQixNQUFNQyxFQUFXQyxLQUFLQyxNQUFNQyxhQUFhQyxRQUFRVixJQUlqRCxHQUZBQyxRQUFRQyxJQUFJSSxHQUVSQSxHQUFnQyxJQUFwQkEsRUFBU0ssT0FLckIsQ0FDQVosRUFBYyxHQUVkLElBQUksSUFBSWEsS0FBUU4sRUFDWlAsRUFBWWMsS0FBS1AsRUFBU00sV0FSOUJiLEVBQWMsQ0dUWCxDQUFDZSxTQURTLENDUVYsQ0FBQ0MsTUFSTSxXQVFDQyxLQVBGLDBCQU9RQyxNQU5QLGNBTWNDLFFBTFosbUJBS3FCQyxTQUpwQixFQUk4QkMsVUFIN0IsQ0FBQyxDQUFDQyxLQUFLLGlCQUFrQkMsT0FBTSxJQUdTQyxVQUZ6QyxNSm1CakJkLGFBQWFlLFFBQVF4QixFQUFhTyxLQUFLa0IsVUFBVTFCLEtDakJyRDJCLEdBQ0F6QixRQUFRQyxJQUFJLGlCIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3Byb2plY3RGYWN0b3J5fSBmcm9tIFwiLi9wcm9qZWN0T2JqTW9kdWxlXCI7XG5cblxuLy9ob2xkIHRoZSBwcm9qZWN0IGxpc3QgYW5kIGhhbmRsZSBsb2NhbHN0b3JhZ2UgZnVuY3Rpb25zXG5sZXQgcHJvamVjdExpc3Q7XG5jb25zdCBzdG9yYWdlTmFtZSA9ICdPZGluLVRvZG8nO1xuXG4vL2xvYWQgdGhlIHByb2plY3QgbGlzdCBmcm9tIGxvY2FsIHN0b3JhZ2VcbmNvbnN0IGZldGNoUHJvamVjdExpc3QgPSAoKSA9PntcbiAgICBjb25zdCBsb2NhbE9iaiA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmFnZU5hbWUpKTtcblxuICAgIGNvbnNvbGUubG9nKGxvY2FsT2JqKTtcbiAgICAvL2lmIG5vIGV4aXN0aW5nIGxpc3QgaXMgZm91bmQsIGNyZWF0ZSBhIGRlZmF1bHQgb25lXG4gICAgaWYoIWxvY2FsT2JqIHx8IGxvY2FsT2JqLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIHByb2plY3RMaXN0ID0gW3Byb2plY3RGYWN0b3J5KCldO1xuICAgICAgICBzdG9yZVByb2plY3RMaXN0KCk7XG4gICAgfVxuICAgIC8vbG9hZCBhbiBleGlzdGluZyBsaXNcbiAgICBlbHNle1xuICAgICAgICBwcm9qZWN0TGlzdCA9IFtdO1xuICAgICAgICAvL2NvbnZlcnQganNvbiBvYmplY3QgdG8gYXJyYXlcbiAgICAgICAgZm9yKGxldCBwcm9wIGluIGxvY2FsT2JqKXtcbiAgICAgICAgICAgIHByb2plY3RMaXN0LnB1c2gobG9jYWxPYmoucHJvcCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vc3RvcmUgdGhlIHByb2plY3QgbGlzdCBpbiBsb2NhbCBzdG9yYWdlXG5jb25zdCBzdG9yZVByb2plY3RMaXN0ID0gKCkgPT57XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZU5hbWUsIEpTT04uc3RyaW5naWZ5KHByb2plY3RMaXN0KSk7XG59XG5cbi8vcmVzZXQgdGhlIGxvY2FsIHN0b3JhZ2VcbmNvbnN0IHJlc2V0U3RvcmFnZSA9ICgpID0+e1xuICAgIHByb2plY3RMaXN0ID0gW107XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZU5hbWUsIEpTT04uc3RyaW5naWZ5KG51bGwpKTtcbiAgICAvL3VwZGF0ZSBVSSBvciBsZXQgY2FsbGVyIGRvIGl0XG59XG5cbmV4cG9ydCB7ZmV0Y2hQcm9qZWN0TGlzdCwgc3RvcmVQcm9qZWN0TGlzdCwgcmVzZXRTdG9yYWdlfTtcbiIsImltcG9ydCB7bG9hZEhvbWV9IGZyb20gXCIuL2hvbWVQYWdlTW9kdWxlLmpzXCI7XG5pbXBvcnQge3Byb2plY3RGYWN0b3J5fSBmcm9tIFwiLi9wcm9qZWN0T2JqTW9kdWxlLmpzXCI7XG5pbXBvcnQge2xvYWRQcm9qZWN0fSBmcm9tIFwiLi9wcm9qZWN0UGFnZU1vZHVsZS5qc1wiO1xuaW1wb3J0IHt0YXNrRmFjdG9yeX0gZnJvbSBcIi4vdGFza09iak1vZHVsZVwiO1xuaW1wb3J0IHtmZXRjaFByb2plY3RMaXN0LCBzdG9yZVByb2plY3RMaXN0LCByZXNldFN0b3JhZ2V9IGZyb20gXCIuL3N0b3JhZ2VNb2R1bGVcIlxuXG4vL3Rlc3QgdGhhdCB3ZWJwYWNrIHdvcmtzXG5jb25zb2xlLmxvZygnd2VicGFjayBjb21waWxlZCB0byBtYWluLmpzJyk7XG5cbmNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpO1xubG9hZEhvbWUoY29udGVudCk7XG5cbmZldGNoUHJvamVjdExpc3QoKTtcbmNvbnNvbGUubG9nKCdlbmQgb2YgaW5kZXgnKTtcblxuIiwiLy9tb2R1bGUgZm9yIGRpc3BsYXlpbmcgcHJvamVjdHMgb24gYSBtYWluIHBhZ2VcbmNvbnN0IGh0bWxDb250ZW50PWA8aDE+VE9ETyBMaXN0czwvaDE+XG48ZGl2IGNsYXNzPVwiY3JlYXRlLWJ1dHRvblwiPkNyZWF0ZSBOZXcgUHJvamVjdDwvZGl2PlxuPHVsIGlkPVwicHJvamVjdC1saXN0XCI+XG4gIDxsaSBjbGFzcz1cInByb2plY3RcIj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtdGl0bGVcIj5Qcm9qZWN0IDE8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtY291bnRlclwiPjIyIHRvZG9zPC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LXZpZXdcIj5WaWV3PC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LWRlbGV0ZVwiPkRlbGV0ZTwvZGl2PlxuICA8L2xpPlxuICA8bGkgY2xhc3M9XCJwcm9qZWN0XCI+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LXRpdGxlXCI+UHJvamVjdCAxPC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LWNvdW50ZXJcIj4yMiB0b2RvczwvZGl2PlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC12aWV3XCI+VmlldzwvZGl2PlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC1kZWxldGVcIj5EZWxldGU8L2Rpdj5cbiAgPC9saT5cbiAgPGxpIGNsYXNzPVwicHJvamVjdFwiPlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC10aXRsZVwiPlByb2plY3QgMTwvZGl2PlxuICAgIDxkaXYgY2xhc3MgPVwicHJvamVjdC1jb3VudGVyXCI+MjIgdG9kb3M8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3Qtdmlld1wiPlZpZXc8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtZGVsZXRlXCI+RGVsZXRlPC9kaXY+XG4gIDwvbGk+XG4gIDxsaSBjbGFzcz1cInByb2plY3RcIj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtdGl0bGVcIj5Qcm9qZWN0IDE8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzID1cInByb2plY3QtY291bnRlclwiPjIyIHRvZG9zPC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LXZpZXdcIj5WaWV3PC9kaXY+XG4gICAgPGRpdiBjbGFzcyA9XCJwcm9qZWN0LWRlbGV0ZVwiPkRlbGV0ZTwvZGl2PlxuICA8L2xpPlxuPC91bD5gO1xuXG5jb25zdCBsb2FkSG9tZSA9IGNvbnRlbnQgPT57XG4gICAgY29udGVudC5pbm5lckhUTUwgPSBodG1sQ29udGVudDtcbn1cblxuZXhwb3J0IHtsb2FkSG9tZX07IiwiaW1wb3J0IHsgdGFza0ZhY3RvcnkgfSBmcm9tIFwiLi90YXNrT2JqTW9kdWxlXCI7XG5cbi8vY29uc3RydWN0b3IgYW5kIGhlbHBlciBmdW5jdGlvbnMgZm9yIHByb2plY3Qgb2JqZWN0c1xuY29uc3QgcHJvamVjdEZhY3RvcnkgPSAoKSA9PntcbiAgICBjb25zdCB0YXNrTGlzdCA9IFt0YXNrRmFjdG9yeSgpXTtcbiAgICByZXR1cm4ge3Rhc2tMaXN0fTtcbn1cblxuZXhwb3J0IHtwcm9qZWN0RmFjdG9yeX07IiwiLy9jb25zdHJ1Y3RvciBhbmQgaGVscGVyIGZ1bmN0aW9ucyBmb3IgdGFzay90b2RvIG9iamVjdHNcbmltcG9ydCB7Zm9ybWF0fSBmcm9tICdkYXRlLWZucyc7XG5cbmNvbnN0IHRhc2tGYWN0b3J5ID0gKCkgPT57XG4gICAgY29uc3QgdGl0bGUgPSAnTmV3IFRhc2snO1xuICAgIGNvbnN0IGRlc2MgPSAnQSBkZWZhdWx0IHRhc2sgdGVtcGxhdGUnO1xuICAgIGNvbnN0IG5vdGVzID0gJ2JsYW5rIG5vdGVzJztcbiAgICBjb25zdCBkdWVEYXRlID0gJ3NldCB0aGlzIHNvbWVob3cnO1xuICAgIGNvbnN0IHByaW9yaXR5ID0gMDtcbiAgICBjb25zdCBjaGVja2xpc3QgPSBbe25hbWU6J2VkaXQgdGhpcyB0YWtzJywgdmFsdWU6ZmFsc2V9XTtcbiAgICBjb25zdCByZXNvbHZlZCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHt0aXRsZSwgZGVzYywgbm90ZXMsIGR1ZURhdGUsIHByaW9yaXR5LCBjaGVja2xpc3QsIHJlc29sdmVkfTtcbn1cblxuZXhwb3J0IHt0YXNrRmFjdG9yeX07Il0sInNvdXJjZVJvb3QiOiIifQ==