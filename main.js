(()=>{"use strict";const e=({title:t,desc:n,notes:c,dueDate:s,priority:a,checkList:d,resolved:i})=>({title:t,desc:n,notes:c,dueDate:s,priority:a,checkList:d,resolved:i,copy:()=>{const s=d.map((e=>[e[0],e[1]]));return e({title:t,desc:n,notes:c,dueDate:"bad for now",priority:a,checkList:s,resolved:i})}}),t=(t,n)=>({name:t,taskList:n,addTask:()=>{const t=e({title:"New Task",desc:"A blank task",notes:"blank notes",dueDate:"set this somehow",priority:"none",checkList:[["sample checkbox",!1]],resolved:!1});n.push(t)},deleteTask:e=>{for(let t=0;t<n.length;t++)if(n[t]===e){n.splice(t,1);break}}});let n;const c="Odin-Todo",s=()=>{localStorage.setItem(c,JSON.stringify(n))},a=()=>{const e=t("New Project",[]);e.addTask(),n.push(e),s()},d=(e,t,n,c)=>{const s=document.createElement("div");e.append(s);const a=document.createElement("label");a.innerText=t,s.append(a);const d=document.createElement(n);s.append(d);const i=c(d,a);return console.log(i),i},i=(e,t)=>({elem:e,label:t,setValue:t=>{e.setAttribute("value",t)},getValue:()=>e.value}),o=(e,t)=>({elem:e,label:t,setValue:t=>{e.innerText=t},getValue:()=>e.value}),l=(e,t)=>{e.innerHTML="";const n=document.createElement("div");n.setAttribute("id","project-info"),e.appendChild(n);const c=document.createElement("button");c.innerText="Back to Home",c.classList.add("back-button"),n.appendChild(c),c.addEventListener("click",(()=>{k(e)}));const a=document.createElement("h1");a.innerText=t.name,n.appendChild(a);const d=document.createElement("button");d.innerText="Rename Project",d.classList.add("project-rename"),n.appendChild(d),d.addEventListener("click",(()=>{const e=prompt("New project name?");e&&(t.name=e,a.innerText=e,s())}));const i=document.createElement("button");i.innerText="Create New Task",i.classList.add("create-button"),e.appendChild(i),i.addEventListener("click",(()=>{t.addTask(),s(),l(e,t)}));const o=document.createElement("ul");o.setAttribute("id","task-list"),e.appendChild(o);const p=t.taskList,u={content:e,project:t};p.forEach((e=>{const t=document.createElement("li");o.appendChild(t),r(e,t,u)})),e.appendChild(o)},r=(e,t,n)=>{const c=p(e,t),s=document.createElement("button");return s.classList.add("mini-task-expand"),s.innerText=">",c.append(s),s.addEventListener("click",(()=>{t.innerHTML="",u(e,t,n)})),c},p=(e,t,n)=>{const c=document.createElement("div");c.classList.add("mini-task"),t.append(c);const s=document.createElement("div");s.classList.add("mini-task-title"),s.innerText=e.title,c.append(s);const a=document.createElement("div");return a.classList.add("mini-task-date"),a.innerText=e.dueDate,c.append(a),e.resolved?c.classList.add(m("none")):c.classList.add(m(e.priority)),c},u=(e,t,n)=>{const c=document.createElement("div");c.classList.add("full-task"),t.append(c);const a=p(e,c),m=document.createElement("button");m.classList.add("mini-task-expand"),m.innerText="^",a.append(m),m.addEventListener("click",(()=>{t.innerHTML="",r(e,t)}));const k=document.createElement("div");k.classList.add("full-task-details"),t.append(k);const E=document.createElement("div");E.classList.add("full-task-text"),E.innerText=e.desc,k.append(E);const L=document.createElement("div");L.classList.add("full-task-text"),L.innerText=e.notes,k.append(L);const T=document.createElement("div");T.classList.add("full-task-text"),e.resolved?T.innerText="Priority: none (resolved)":T.innerText=`Priority: ${e.priority}`,k.append(T);const v=document.createElement("ul");v.classList.add("full-task-list"),k.append(v),e.checkList.forEach((e=>{const t=document.createElement("li");t.classList.add("full-task-list-item"),v.append(t);const n=document.createElement("input");n.setAttribute("type","checkbox"),t.append(n),e[1]&&n.toggleAttribute("checked"),t.addEventListener("click",(()=>{e[1]=!e[1],s()}));const c=document.createElement("p");c.innerText=e[0],t.append(c)}));const h=document.createElement("div");h.classList.add("full-task-button-row"),k.append(h);const b=document.createElement("button");b.classList.add("full-task-edit"),b.innerText="Edit Task",h.append(b),b.addEventListener("click",(()=>{((e,t,n)=>{e.innerHTML="";const c=document.createElement("div");c.setAttribute("id","task-header"),e.append(c);const a=document.createElement("button");a.innerText="Back to Project",a.classList.add("back-button"),c.append(a),a.addEventListener("click",(()=>{l(e,t)}));const r=document.createElement("h1");r.innerText="Edit Task",c.appendChild(r);const p=document.createElement("div");p.setAttribute("id","task-container"),e.append(p);const u=d(p,"Title","input",i);u.setValue(n.title);const m=d(p,"Description","textarea",o);m.setValue(n.desc),console.log(m.elem.value),console.log(n.desc);const k=document.createElement("button");k.innerText="Save Task",e.append(k),k.addEventListener("click",(()=>{n.title=u.getValue(),n.desc=m.getValue(),s(),l(e,t)}))})(n.content,n.project,e)}));const x=document.createElement("button");x.classList.add("full-task-delete"),x.innerText="Delete Task",h.append(x),x.addEventListener("click",(()=>{t.remove(),n.project.deleteTask(e),s()}));const g=document.createElement("button");return g.classList.add("full-task-resolve"),g.innerText="Toggle Resolved",h.append(g),g.addEventListener("click",(()=>{e.resolved=!e.resolved,t.innerHTML="",u(e,t,n),s()})),c},m=e=>{switch(e){case"high":return"high-priority";case"medium":return"medium-priority";case"low":return"low-priority";default:return"no-priority"}},k=e=>{e.innerHTML="";const t=document.createElement("h1");t.innerText="TODO Lists",e.appendChild(t);const d=document.createElement("button");d.innerText="Create New Project",d.classList.add("create-button"),e.appendChild(d),d.addEventListener("click",(()=>{a(),k(e)}));const i=document.createElement("ul");i.setAttribute("id","project-list"),e.appendChild(i),n.forEach((t=>{const c=document.createElement("li");c.classList.add("project");const a=document.createElement("div");a.classList.add("project-title"),a.innerText=t.name,c.append(a);const d=document.createElement("div");d.classList.add("project-counter"),d.innerText=`${t.taskList.length} todos`,c.append(d);const o=document.createElement("button");o.classList.add("project-view"),o.innerText="View",c.append(o),o.addEventListener("click",(()=>{l(e,t)}));const r=document.createElement("button");r.classList.add("project-delete"),r.innerText="Delete",c.append(r),r.addEventListener("click",(()=>{(e=>{n=n.filter((t=>t!==e)),s()})(t),k(e)})),i.appendChild(c)})),e.appendChild(i);const o=document.createElement("button");o.classList.add("home-reset"),o.innerText="Reset all",e.append(o),o.addEventListener("click",(()=>{n=[],localStorage.setItem(c,JSON.stringify(null)),a(),k(e)}))};console.log("webpack compiled to main.js");const E=document.querySelector("#content");(()=>{const s=JSON.parse(localStorage.getItem(c));s&&0!==s.length?n=s.map((n=>(n=>{let c=n.taskList.map((t=>(t=>e(t))(t)));return t(n.name,c)})(n))):(console.log("initialize project list"),n=[],a()),console.table(n)})(),k(E),console.log("end of index")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdGFza09iak1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdE9iak1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3RvcmFnZU1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdGFza1BhZ2VNb2R1bGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3Byb2plY3RQYWdlTW9kdWxlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9ob21lUGFnZU1vZHVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsidGFza0ZhY3RvcnkiLCJ0aXRsZSIsImRlc2MiLCJub3RlcyIsImR1ZURhdGUiLCJwcmlvcml0eSIsImNoZWNrTGlzdCIsInJlc29sdmVkIiwiY29weSIsImNDb3B5IiwibWFwIiwiZWxlbSIsInByb2plY3RGYWN0b3J5IiwibmFtZSIsInRhc2tMaXN0IiwiYWRkVGFzayIsIm5ld1Rhc2siLCJwdXNoIiwiZGVsZXRlVGFzayIsInQiLCJpIiwibGVuZ3RoIiwic3BsaWNlIiwicHJvamVjdExpc3QiLCJzdG9yYWdlTmFtZSIsInN0b3JlUHJvamVjdExpc3QiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWF0ZU5ld1Byb2plY3QiLCJwIiwiaW5wdXRNYWtlciIsImVsZW1UeXBlIiwiZmFjdG9yeSIsImJveCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsImxhYmVsIiwiaW5uZXJUZXh0IiwiaW5wdXQiLCJpbnB1dE9iaiIsImNvbnNvbGUiLCJsb2ciLCJ0ZXh0SW5wdXRGYWN0b3J5Iiwic2V0VmFsdWUiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsImdldFZhbHVlIiwidGV4dEFyZWFGYWN0b3J5IiwibG9hZFByb2plY3QiLCJjb250ZW50IiwicHJvamVjdCIsImlubmVySFRNTCIsInRvcENvbnRhaW5lciIsImFwcGVuZENoaWxkIiwiYmFja2VyIiwiY2xhc3NMaXN0IiwiYWRkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvYWRIb21lIiwiaDEiLCJwcm9qZWN0TmFtZXIiLCJwcm9tcHQiLCJjcmVhdGVyIiwidUxpc3QiLCJwYXJlbnRJbmZvIiwiZm9yRWFjaCIsInJvdyIsImNyZWF0ZU1pbmlUYXNrUGFuZSIsInRhc2siLCJpbm5lckl0ZW0iLCJtaW5pVGFza0NvbnRlbnQiLCJleHBhbmRlciIsImNyZWF0ZUZ1bGxUYXNrUGFuZSIsInRUaXRsZSIsInREYXRlIiwicHJpb3JpdHlDb2xvciIsIm1pbmkiLCJzaHJpbmtlciIsImRldGFpbHMiLCJwcmlvIiwiY0xpc3QiLCJjIiwiY2hlY2siLCJjQm94IiwidG9nZ2xlQXR0cmlidXRlIiwiY1RleHQiLCJidXR0b25Sb3ciLCJlZGl0IiwiY29udGFpbmVyIiwic2F2ZSIsImxvYWRUYXNrIiwiZGVsQnV0dG9uIiwicmVtb3ZlIiwicmVzb2x2ZSIsIml0ZW0iLCJwVGl0bGUiLCJwVGFza3MiLCJwVmlldyIsInBEZWxldGUiLCJmaWx0ZXIiLCJkZWxldGVQcm9qZWN0IiwicmVzZXRlciIsInF1ZXJ5U2VsZWN0b3IiLCJsb2NhbE9iaiIsInBhcnNlIiwiZ2V0SXRlbSIsIm9iaiIsInRhc2tGcm9tT2JqZWN0IiwicHJvamVjdEZyb21PYmplY3QiLCJ0YWJsZSIsImxvYWRQcm9qZWN0TGlzdCJdLCJtYXBwaW5ncyI6Im1CQUdBLE1BQU1BLEVBQWMsRUFBRUMsUUFDbEJDLE9BQ0FDLFFBQ0FDLFVBQ0FDLFdBQ0FDLFlBQ0FDLGVBNkJPLENBQUNOLFFBQU9DLE9BQU1DLFFBQU9DLFVBQVNDLFdBQVVDLFlBQVdDLFdBQVVDLEtBcEJ2RCxLQUVULE1BQU1DLEVBQVFILEVBQVVJLEtBQUtDLEdBRWxCLENBQUNBLEVBQUssR0FBSUEsRUFBSyxNQWExQixPQVZnQlgsRUFBWSxDQUN4QkMsTUFBT0EsRUFDUEMsS0FBTUEsRUFDTkMsTUFBT0EsRUFDUEMsUUFBUyxjQUNUQyxTQUFVQSxFQUNWQyxVQUFXRyxFQUNYRixTQUFVQSxPQzdCaEJLLEVBQWlCLENBQUNDLEVBQU1DLEtBMEJuQixDQUFDRCxPQUFNQyxXQUFVQyxRQXhCUixLQUNaLE1BQU1DLEVBQVVoQixFQUFZLENBQ3hCQyxNQUFPLFdBQ1BDLEtBQU0sZUFDTkMsTUFBTyxjQUNQQyxRQUFTLG1CQUNUQyxTQUFVLE9BQ1ZDLFVBQVcsQ0FBQyxDQUFDLG1CQUFtQixJQUNoQ0MsVUFBVSxJQUVkTyxFQUFTRyxLQUFLRCxJQWNlRSxXQVZiQyxJQUNoQixJQUFJLElBQUlDLEVBQUksRUFBR0EsRUFBSU4sRUFBU08sT0FBUUQsSUFFaEMsR0FBR04sRUFBU00sS0FBT0QsRUFBRSxDQUNqQkwsRUFBU1EsT0FBT0YsRUFBRyxHQUNuQixVQ3JCaEIsSUFBSUcsRUFDSixNQUFNQyxFQUFjLFlBc0JkQyxFQUFtQixLQUNyQkMsYUFBYUMsUUFBUUgsRUFBYUksS0FBS0MsVUFBVU4sS0FnQi9DTyxFQUFtQixLQUNyQixNQUFNQyxFQUFJbkIsRUFBZSxjQUFlLElBQ3hDbUIsRUFBRWhCLFVBQ0ZRLEVBQVlOLEtBQUtjLEdBQ2pCTixLQytCRU8sRUFBYSxDQUFDckIsRUFBTVYsRUFBT2dDLEVBQVVDLEtBRXZDLE1BQU1DLEVBQU1DLFNBQVNDLGNBQWMsT0FDbkMxQixFQUFLMkIsT0FBT0gsR0FFWixNQUFNSSxFQUFRSCxTQUFTQyxjQUFjLFNBQ3JDRSxFQUFNQyxVQUFZdkMsRUFDbEJrQyxFQUFJRyxPQUFPQyxHQUVYLE1BQU1FLEVBQVFMLFNBQVNDLGNBQWNKLEdBQ3JDRSxFQUFJRyxPQUFPRyxHQUVYLE1BQU1DLEVBQVdSLEVBQVFPLEVBQU9GLEdBR2hDLE9BRkFJLFFBQVFDLElBQUlGLEdBRUxBLEdBTUxHLEVBQW1CLENBQUNsQyxFQUFNNEIsS0FTckIsQ0FBQzVCLE9BQU00QixRQUFPTyxTQVJIQyxJQUNkcEMsRUFBS3FDLGFBQWEsUUFBUUQsSUFPQ0UsU0FMZCxJQUVOdEMsRUFBS29DLFFBTWRHLEVBQWtCLENBQUN2QyxFQUFNNEIsS0FVcEIsQ0FBQzVCLE9BQU00QixRQUFPTyxTQVRMQyxJQUVkcEMsRUFBSzZCLFVBQVlPLEdBT1lFLFNBTGhCLElBRU50QyxFQUFLb0MsUUMvR1pJLEVBQWMsQ0FBQ0MsRUFBU0MsS0FDNUJELEVBQVFFLFVBQVksR0FHcEIsTUFBTUMsRUFBZW5CLFNBQVNDLGNBQWMsT0FDNUNrQixFQUFhUCxhQUFhLEtBQU0sZ0JBQ2hDSSxFQUFRSSxZQUFZRCxHQUdwQixNQUFNRSxFQUFTckIsU0FBU0MsY0FBYyxVQUN0Q29CLEVBQU9qQixVQUFZLGVBQ25CaUIsRUFBT0MsVUFBVUMsSUFBSSxlQUNyQkosRUFBYUMsWUFBWUMsR0FDekJBLEVBQU9HLGlCQUFpQixTQUFTLEtBQy9CQyxFQUFTVCxNQUlYLE1BQU1VLEVBQUsxQixTQUFTQyxjQUFjLE1BQ2xDeUIsRUFBR3RCLFVBQVlhLEVBQVF4QyxLQUN2QjBDLEVBQWFDLFlBQVlNLEdBR3pCLE1BQU1DLEVBQWUzQixTQUFTQyxjQUFjLFVBQzVDMEIsRUFBYXZCLFVBQVksaUJBQ3pCdUIsRUFBYUwsVUFBVUMsSUFBSSxrQkFDM0JKLEVBQWFDLFlBQVlPLEdBRXpCQSxFQUFhSCxpQkFBaUIsU0FBUyxLQUNyQyxNQUFNbkIsRUFBUXVCLE9BQU8scUJBQ2xCdkIsSUFDRFksRUFBUXhDLEtBQU80QixFQUNmcUIsRUFBR3RCLFVBQVlDLEVBQ2ZoQixRQU1KLE1BQU13QyxFQUFVN0IsU0FBU0MsY0FBYyxVQUN2QzRCLEVBQVF6QixVQUFZLGtCQUNwQnlCLEVBQVFQLFVBQVVDLElBQUksaUJBQ3RCUCxFQUFRSSxZQUFZUyxHQUNwQkEsRUFBUUwsaUJBQWlCLFNBQVMsS0FDaENQLEVBQVF0QyxVQUNSVSxJQUNBMEIsRUFBWUMsRUFBU0MsTUFJdkIsTUFBTWEsRUFBUTlCLFNBQVNDLGNBQWMsTUFDckM2QixFQUFNbEIsYUFBYSxLQUFNLGFBQ3pCSSxFQUFRSSxZQUFZVSxHQUdwQixNQUFNcEQsRUFBV3VDLEVBQVF2QyxTQUNuQnFELEVBQWEsQ0FBQ2YsVUFBU0MsV0FFN0J2QyxFQUFTc0QsU0FBUWpELElBRWYsTUFBTWtELEVBQU1qQyxTQUFTQyxjQUFjLE1BQ25DNkIsRUFBTVYsWUFBWWEsR0FHbEJDLEVBQW1CbkQsRUFBR2tELEVBQUtGLE1BSTdCZixFQUFRSSxZQUFZVSxJQUdoQkksRUFBcUIsQ0FBQ0MsRUFBTTVELEVBQU13RCxLQUN0QyxNQUFNSyxFQUFZQyxFQUFnQkYsRUFBTTVELEdBR2xDK0QsRUFBV3RDLFNBQVNDLGNBQWMsVUFTeEMsT0FSQXFDLEVBQVNoQixVQUFVQyxJQUFJLG9CQUN2QmUsRUFBU2xDLFVBQVksSUFDckJnQyxFQUFVbEMsT0FBT29DLEdBQ2pCQSxFQUFTZCxpQkFBaUIsU0FBUyxLQUNqQ2pELEVBQUsyQyxVQUFZLEdBQ2pCcUIsRUFBbUJKLEVBQU01RCxFQUFNd0QsTUFHMUJLLEdBR0hDLEVBQWtCLENBQUNGLEVBQU01RCxFQUFNd0QsS0FDbkMsTUFBTUssRUFBWXBDLFNBQVNDLGNBQWMsT0FDekNtQyxFQUFVZCxVQUFVQyxJQUFJLGFBQ3hCaEQsRUFBSzJCLE9BQU9rQyxHQUdaLE1BQU1JLEVBQVN4QyxTQUFTQyxjQUFjLE9BQ3RDdUMsRUFBT2xCLFVBQVVDLElBQUksbUJBQ3JCaUIsRUFBT3BDLFVBQVkrQixFQUFLdEUsTUFDeEJ1RSxFQUFVbEMsT0FBT3NDLEdBR2pCLE1BQU1DLEVBQVF6QyxTQUFTQyxjQUFjLE9BV3JDLE9BVkF3QyxFQUFNbkIsVUFBVUMsSUFBSSxrQkFDcEJrQixFQUFNckMsVUFBWStCLEVBQUtuRSxRQUN2Qm9FLEVBQVVsQyxPQUFPdUMsR0FHZE4sRUFBS2hFLFNBQ05pRSxFQUFVZCxVQUFVQyxJQUFJbUIsRUFBYyxTQUV0Q04sRUFBVWQsVUFBVUMsSUFBSW1CLEVBQWNQLEVBQUtsRSxXQUV0Q21FLEdBR0hHLEVBQXFCLENBQUNKLEVBQU01RCxFQUFNd0QsS0FDdEMsTUFBTUssRUFBWXBDLFNBQVNDLGNBQWMsT0FDekNtQyxFQUFVZCxVQUFVQyxJQUFJLGFBQ3hCaEQsRUFBSzJCLE9BQU9rQyxHQUdaLE1BQU1PLEVBQU9OLEVBQWdCRixFQUFNQyxHQUc3QlEsRUFBVzVDLFNBQVNDLGNBQWMsVUFDeEMyQyxFQUFTdEIsVUFBVUMsSUFBSSxvQkFDdkJxQixFQUFTeEMsVUFBWSxJQUNyQnVDLEVBQUt6QyxPQUFPMEMsR0FDWkEsRUFBU3BCLGlCQUFpQixTQUFTLEtBQ2pDakQsRUFBSzJDLFVBQVksR0FDakJnQixFQUFtQkMsRUFBTTVELE1BSTNCLE1BQU1zRSxFQUFVN0MsU0FBU0MsY0FBYyxPQUN2QzRDLEVBQVF2QixVQUFVQyxJQUFJLHFCQUN0QmhELEVBQUsyQixPQUFPMkMsR0FHWixNQUFNL0UsRUFBT2tDLFNBQVNDLGNBQWMsT0FDcENuQyxFQUFLd0QsVUFBVUMsSUFBSSxrQkFDbkJ6RCxFQUFLc0MsVUFBWStCLEVBQUtyRSxLQUN0QitFLEVBQVEzQyxPQUFPcEMsR0FHZixNQUFNQyxFQUFRaUMsU0FBU0MsY0FBYyxPQUNyQ2xDLEVBQU11RCxVQUFVQyxJQUFJLGtCQUNwQnhELEVBQU1xQyxVQUFZK0IsRUFBS3BFLE1BQ3ZCOEUsRUFBUTNDLE9BQU9uQyxHQUdmLE1BQU0rRSxFQUFPOUMsU0FBU0MsY0FBYyxPQUNwQzZDLEVBQUt4QixVQUFVQyxJQUFJLGtCQUNoQlksRUFBS2hFLFNBQ04yRSxFQUFLMUMsVUFBWSw0QkFFakIwQyxFQUFLMUMsVUFBWSxhQUFhK0IsRUFBS2xFLFdBQ3JDNEUsRUFBUTNDLE9BQU80QyxHQUdmLE1BQU1DLEVBQVEvQyxTQUFTQyxjQUFjLE1BQ3JDOEMsRUFBTXpCLFVBQVVDLElBQUksa0JBQ3BCc0IsRUFBUTNDLE9BQU82QyxHQUVmWixFQUFLakUsVUFBVThELFNBQVFnQixJQUVyQixNQUFNQyxFQUFRakQsU0FBU0MsY0FBYyxNQUNyQ2dELEVBQU0zQixVQUFVQyxJQUFJLHVCQUNwQndCLEVBQU03QyxPQUFPK0MsR0FHYixNQUFNQyxFQUFPbEQsU0FBU0MsY0FBYyxTQUNwQ2lELEVBQUt0QyxhQUFhLE9BQVEsWUFDMUJxQyxFQUFNL0MsT0FBT2dELEdBQ1ZGLEVBQUUsSUFDSEUsRUFBS0MsZ0JBQWdCLFdBQ3ZCRixFQUFNekIsaUJBQWlCLFNBQVMsS0FDOUJ3QixFQUFFLElBQU1BLEVBQUUsR0FDVjNELE9BSUYsTUFBTStELEVBQVFwRCxTQUFTQyxjQUFjLEtBQ3JDbUQsRUFBTWhELFVBQVk0QyxFQUFFLEdBQ3BCQyxFQUFNL0MsT0FBT2tELE1BSWYsTUFBTUMsRUFBWXJELFNBQVNDLGNBQWMsT0FDekNvRCxFQUFVL0IsVUFBVUMsSUFBSSx3QkFDeEJzQixFQUFRM0MsT0FBT21ELEdBR2YsTUFBTUMsRUFBT3RELFNBQVNDLGNBQWMsVUFDcENxRCxFQUFLaEMsVUFBVUMsSUFBSSxrQkFDbkIrQixFQUFLbEQsVUFBWSxZQUNqQmlELEVBQVVuRCxPQUFPb0QsR0FFakJBLEVBQUs5QixpQkFBaUIsU0FBUyxLRHhNaEIsRUFBQ1IsRUFBU0MsRUFBU2tCLEtBQ2hDbkIsRUFBUUUsVUFBWSxHQUdwQixNQUFNQyxFQUFlbkIsU0FBU0MsY0FBYyxPQUM1Q2tCLEVBQWFQLGFBQWEsS0FBTSxlQUNoQ0ksRUFBUWQsT0FBT2lCLEdBR2YsTUFBTUUsRUFBU3JCLFNBQVNDLGNBQWMsVUFDdENvQixFQUFPakIsVUFBWSxrQkFDbkJpQixFQUFPQyxVQUFVQyxJQUFJLGVBQ3JCSixFQUFhakIsT0FBT21CLEdBQ3BCQSxFQUFPRyxpQkFBaUIsU0FBUyxLQUM3QlQsRUFBWUMsRUFBU0MsTUFJekIsTUFBTVMsRUFBSzFCLFNBQVNDLGNBQWMsTUFDbEN5QixFQUFHdEIsVUFBWSxZQUNmZSxFQUFhQyxZQUFZTSxHQUd6QixNQUFNNkIsRUFBWXZELFNBQVNDLGNBQWMsT0FDekNzRCxFQUFVM0MsYUFBYSxLQUFNLGtCQUM3QkksRUFBUWQsT0FBT3FELEdBS2YsTUFBTTFGLEVBQVErQixFQUFXMkQsRUFBVyxRQUFTLFFBQVM5QyxHQUN0RDVDLEVBQU02QyxTQUFTeUIsRUFBS3RFLE9BR3BCLE1BQU1DLEVBQU84QixFQUFXMkQsRUFBVyxjQUFlLFdBQVl6QyxHQUM5RGhELEVBQUs0QyxTQUFTeUIsRUFBS3JFLE1BQ25CeUMsUUFBUUMsSUFBSTFDLEVBQUtTLEtBQUtvQyxPQUN0QkosUUFBUUMsSUFBSTJCLEVBQUtyRSxNQVdqQixNQUFNMEYsRUFBT3hELFNBQVNDLGNBQWMsVUFDcEN1RCxFQUFLcEQsVUFBWSxZQUNqQlksRUFBUWQsT0FBT3NELEdBQ2ZBLEVBQUtoQyxpQkFBaUIsU0FBUyxLQUUzQlcsRUFBS3RFLE1BQVFBLEVBQU1nRCxXQUNuQnNCLEVBQUtyRSxLQUFPQSxFQUFLK0MsV0FnQmpCeEIsSUFDQTBCLEVBQVlDLEVBQVNDLE9Da0l6QndDLENBQVMxQixFQUFXZixRQUFTZSxFQUFXZCxRQUFTa0IsTUFJbkQsTUFBTXVCLEVBQVkxRCxTQUFTQyxjQUFjLFVBQ3pDeUQsRUFBVXBDLFVBQVVDLElBQUksb0JBQ3hCbUMsRUFBVXRELFVBQVksY0FDdEJpRCxFQUFVbkQsT0FBT3dELEdBQ2pCQSxFQUFVbEMsaUJBQWlCLFNBQVMsS0FFbENqRCxFQUFLb0YsU0FDTDVCLEVBQVdkLFFBQVFuQyxXQUFXcUQsR0FDOUI5QyxPQUlGLE1BQU11RSxFQUFVNUQsU0FBU0MsY0FBYyxVQVl2QyxPQVhBMkQsRUFBUXRDLFVBQVVDLElBQUkscUJBQ3RCcUMsRUFBUXhELFVBQVksa0JBQ3BCaUQsRUFBVW5ELE9BQU8wRCxHQUNqQkEsRUFBUXBDLGlCQUFpQixTQUFTLEtBRWhDVyxFQUFLaEUsVUFBWWdFLEVBQUtoRSxTQUN0QkksRUFBSzJDLFVBQVksR0FDakJxQixFQUFtQkosRUFBTTVELEVBQU13RCxHQUMvQjFDLE9BR0srQyxHQUdITSxFQUFpQnpFLElBQ3JCLE9BQU9BLEdBQ0wsSUFBSyxPQUNILE1BQU8sZ0JBQ1QsSUFBSyxTQUNILE1BQU8sa0JBQ1QsSUFBSyxNQUNILE1BQU8sZUFDVCxRQUNFLE1BQU8sZ0JDOU9Qd0QsRUFBV1QsSUFDYkEsRUFBUUUsVUFBWSxHQUdwQixNQUFNUSxFQUFLMUIsU0FBU0MsY0FBYyxNQUNsQ3lCLEVBQUd0QixVQUFZLGFBQ2ZZLEVBQVFJLFlBQVlNLEdBR3BCLE1BQU1HLEVBQVU3QixTQUFTQyxjQUFjLFVBQ3ZDNEIsRUFBUXpCLFVBQVkscUJBQ3BCeUIsRUFBUVAsVUFBVUMsSUFBSSxpQkFDdEJQLEVBQVFJLFlBQVlTLEdBQ3BCQSxFQUFRTCxpQkFBaUIsU0FBUyxLQUNoQzlCLElBQ0ErQixFQUFTVCxNQUlYLE1BQU1jLEVBQVE5QixTQUFTQyxjQUFjLE1BQ3JDNkIsRUFBTWxCLGFBQWEsS0FBTSxnQkFDekJJLEVBQVFJLFlBQVlVLEdIWWIzQyxFR1BLNkMsU0FBUXJDLElBR2xCLE1BQU1rRSxFQUFPN0QsU0FBU0MsY0FBYyxNQUNwQzRELEVBQUt2QyxVQUFVQyxJQUFJLFdBR25CLE1BQU11QyxFQUFTOUQsU0FBU0MsY0FBYyxPQUN0QzZELEVBQU94QyxVQUFVQyxJQUFJLGlCQUNyQnVDLEVBQU8xRCxVQUFZVCxFQUFFbEIsS0FDckJvRixFQUFLM0QsT0FBTzRELEdBR1osTUFBTUMsRUFBUy9ELFNBQVNDLGNBQWMsT0FDdEM4RCxFQUFPekMsVUFBVUMsSUFBSSxtQkFDckJ3QyxFQUFPM0QsVUFBWSxHQUFHVCxFQUFFakIsU0FBU08sZUFDakM0RSxFQUFLM0QsT0FBTzZELEdBR1osTUFBTUMsRUFBUWhFLFNBQVNDLGNBQWMsVUFDckMrRCxFQUFNMUMsVUFBVUMsSUFBSSxnQkFDcEJ5QyxFQUFNNUQsVUFBWSxPQUNsQnlELEVBQUszRCxPQUFPOEQsR0FDWkEsRUFBTXhDLGlCQUFpQixTQUFTLEtBQzlCVCxFQUFZQyxFQUFTckIsTUFJdkIsTUFBTXNFLEVBQVVqRSxTQUFTQyxjQUFjLFVBQ3ZDZ0UsRUFBUTNDLFVBQVVDLElBQUksa0JBQ3RCMEMsRUFBUTdELFVBQVksU0FDcEJ5RCxFQUFLM0QsT0FBTytELEdBQ1pBLEVBQVF6QyxpQkFBaUIsU0FBUyxLSGJsQixDQUFDN0IsSUFDbkJSLEVBQWNBLEVBQVkrRSxRQUFRM0YsR0FBUUEsSUFBU29CLElBQ25ETixLR1lJOEUsQ0FBY3hFLEdBQ2Q4QixFQUFTVCxNQUlYYyxFQUFNVixZQUFZeUMsTUFJcEI3QyxFQUFRSSxZQUFZVSxHQUdwQixNQUFNc0MsRUFBVXBFLFNBQVNDLGNBQWMsVUFDdkNtRSxFQUFROUMsVUFBVUMsSUFBSSxjQUN0QjZDLEVBQVFoRSxVQUFZLFlBQ3BCWSxFQUFRZCxPQUFPa0UsR0FDZkEsRUFBUTVDLGlCQUFpQixTQUFTLEtIaERsQ3JDLEVBQWMsR0FDZEcsYUFBYUMsUUFBUUgsRUFBYUksS0FBS0MsVUFBVSxPR2lEL0NDLElBQ0ErQixFQUFTVCxPQzdFZlQsUUFBUUMsSUFBSSwrQkFFWixNQUFNUSxFQUFVaEIsU0FBU3FFLGNBQWMsWUpGZixNQUVwQixNQUFNQyxFQUFXOUUsS0FBSytFLE1BQU1qRixhQUFha0YsUUFBUXBGLElBSTdDa0YsR0FBZ0MsSUFBcEJBLEVBQVNyRixPQU9yQkUsRUFBY21GLEVBQVNoRyxLQUFJQyxHRGFULENBQUNrRyxJQUN2QixJQUFJL0YsRUFBVytGLEVBQUkvRixTQUFTSixLQUFJQyxHRFFia0csSUFDUjdHLEVBQVk2RyxHQ1RlQyxDQUFlbkcsS0FHckQsT0FGY0MsRUFBZWlHLEVBQUloRyxLQUFNQyxJQ2ZBaUcsQ0FBa0JwRyxNQU5yRGdDLFFBQVFDLElBQUksMkJBQ1pyQixFQUFjLEdBQ2RPLEtBTUphLFFBQVFxRSxNQUFNekYsSUlWbEIwRixHQUVBcEQsRUFBU1QsR0FDVFQsUUFBUUMsSUFBSSxpQiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9jb25zdHJ1Y3RvciBhbmQgaGVscGVyIGZ1bmN0aW9ucyBmb3IgdGFzay90b2RvIG9iamVjdHNcbmltcG9ydCB7Zm9ybWF0fSBmcm9tICdkYXRlLWZucyc7XG5cbmNvbnN0IHRhc2tGYWN0b3J5ID0gKHt0aXRsZSxcbiAgICBkZXNjLFxuICAgIG5vdGVzLFxuICAgIGR1ZURhdGUsXG4gICAgcHJpb3JpdHksXG4gICAgY2hlY2tMaXN0LFxuICAgIHJlc29sdmVkfSkgPT57XG4gICAgLypjb25zdCB0aXRsZSA9ICdOZXcgVGFzayc7XG4gICAgY29uc3QgZGVzYyA9ICdBIGRlZmF1bHQgdGFzayB0ZW1wbGF0ZSc7XG4gICAgY29uc3Qgbm90ZXMgPSAnYmxhbmsgbm90ZXMnO1xuICAgIGNvbnN0IGR1ZURhdGUgPSAnc2V0IHRoaXMgc29tZWhvdyc7XG4gICAgY29uc3QgcHJpb3JpdHkgPSAwO1xuICAgIGNvbnN0IGNoZWNrbGlzdCA9IG51bGw7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSBmYWxzZTsqL1xuXG4gICAgY29uc3QgY29weSA9ICgpID0+e1xuXG4gICAgICAgIGNvbnN0IGNDb3B5ID0gY2hlY2tMaXN0Lm1hcCgoZWxlbSk9PlxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gW2VsZW1bMF0sIGVsZW1bMV1dO1xuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB0YXNrRmFjdG9yeSh7XG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICBkZXNjOiBkZXNjLFxuICAgICAgICAgICAgbm90ZXM6IG5vdGVzLFxuICAgICAgICAgICAgZHVlRGF0ZTogJ2JhZCBmb3Igbm93JyxcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eSxcbiAgICAgICAgICAgIGNoZWNrTGlzdDogY0NvcHksXG4gICAgICAgICAgICByZXNvbHZlZDogcmVzb2x2ZWQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXdUYXNrO1xuICAgIH1cblxuICAgIHJldHVybiB7dGl0bGUsIGRlc2MsIG5vdGVzLCBkdWVEYXRlLCBwcmlvcml0eSwgY2hlY2tMaXN0LCByZXNvbHZlZCwgY29weX07XG59XG5cbi8vY29udmVydCBhIGdlbmVyaWMgb2JqZWN0IHRvIGEgdGFza1xuY29uc3QgdGFza0Zyb21PYmplY3QgPSBvYmogPT57XG4gICAgbGV0IHRhc2sgPSB0YXNrRmFjdG9yeShvYmopO1xuICAgIHJldHVybiB0YXNrO1xufVxuXG5leHBvcnQge3Rhc2tGYWN0b3J5LCB0YXNrRnJvbU9iamVjdH07IiwiaW1wb3J0IHsgdGFza0ZhY3RvcnksIHRhc2tGcm9tT2JqZWN0IH0gZnJvbSBcIi4vdGFza09iak1vZHVsZVwiO1xuXG4vL2NvbnN0cnVjdG9yIGFuZCBoZWxwZXIgZnVuY3Rpb25zIGZvciBwcm9qZWN0IG9iamVjdHNcbmNvbnN0IHByb2plY3RGYWN0b3J5ID0gKG5hbWUsIHRhc2tMaXN0KSA9PntcblxuICAgIGNvbnN0IGFkZFRhc2sgPSAoKT0+e1xuICAgICAgICBjb25zdCBuZXdUYXNrID0gdGFza0ZhY3Rvcnkoe1xuICAgICAgICAgICAgdGl0bGU6ICdOZXcgVGFzaycsIFxuICAgICAgICAgICAgZGVzYzogJ0EgYmxhbmsgdGFzaycsIFxuICAgICAgICAgICAgbm90ZXM6ICdibGFuayBub3RlcycsIFxuICAgICAgICAgICAgZHVlRGF0ZTogJ3NldCB0aGlzIHNvbWVob3cnLCBcbiAgICAgICAgICAgIHByaW9yaXR5OiAnbm9uZScsIFxuICAgICAgICAgICAgY2hlY2tMaXN0OiBbWydzYW1wbGUgY2hlY2tib3gnLCBmYWxzZV1dLCBcbiAgICAgICAgICAgIHJlc29sdmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGFza0xpc3QucHVzaChuZXdUYXNrKTtcbiAgICB9XG5cbiAgICAvL2RlbGV0ZSBhIHRhc2sgZnJvbSB0aGUgbGlzdFxuICAgIGNvbnN0IGRlbGV0ZVRhc2sgPSAodCkgPT57XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0YXNrTGlzdC5sZW5ndGg7IGkrKylcbiAgICAgICAge1xuICAgICAgICAgICAgaWYodGFza0xpc3RbaV0gPT09IHQpe1xuICAgICAgICAgICAgICAgIHRhc2tMaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7bmFtZSwgdGFza0xpc3QsIGFkZFRhc2ssIGRlbGV0ZVRhc2t9O1xufVxuXG4vL2NvbnZlcnQgYSBnZW5lcmljIG9iamVjdCB0byBhIHByb2plY3RcbmNvbnN0IHByb2plY3RGcm9tT2JqZWN0ID0gKG9iaikgPT57XG4gICAgbGV0IHRhc2tMaXN0ID0gb2JqLnRhc2tMaXN0Lm1hcChlbGVtPT50YXNrRnJvbU9iamVjdChlbGVtKSk7XG4gICAgbGV0IHByb2plY3QgPSBwcm9qZWN0RmFjdG9yeShvYmoubmFtZSwgdGFza0xpc3QpO1xuXG4gICAgcmV0dXJuIHByb2plY3Q7XG59O1xuXG5leHBvcnQge3Byb2plY3RGYWN0b3J5LCBwcm9qZWN0RnJvbU9iamVjdH07IiwiaW1wb3J0IHtwcm9qZWN0RmFjdG9yeSwgcHJvamVjdEZyb21PYmplY3R9IGZyb20gXCIuL3Byb2plY3RPYmpNb2R1bGVcIjtcblxuLy9ob2xkIHRoZSBwcm9qZWN0IGxpc3QgYW5kIGhhbmRsZSBsb2NhbHN0b3JhZ2UgZnVuY3Rpb25zXG5sZXQgcHJvamVjdExpc3Q7XG5jb25zdCBzdG9yYWdlTmFtZSA9ICdPZGluLVRvZG8nO1xuXG4vL2xvYWQgdGhlIHByb2plY3QgbGlzdCBmcm9tIGxvY2FsIHN0b3JhZ2VcbmNvbnN0IGxvYWRQcm9qZWN0TGlzdCA9ICgpID0+e1xuICAgIC8vdHJ5IHRvIGxvYWQgZnJvbSBzdG9yYWdlXG4gICAgY29uc3QgbG9jYWxPYmogPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VOYW1lKSk7XG4gICAgLy9jb25zb2xlLnRhYmxlKGxvY2FsT2JqKTtcblxuICAgIC8vaWYgbm8gcmVzdWx0cyBmb3VuZCwgY3JlYXRlIGEgZGVmYXVsdCBvbmVcbiAgICBpZighbG9jYWxPYmogfHwgbG9jYWxPYmoubGVuZ3RoID09PSAwKXtcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXRpYWxpemUgcHJvamVjdCBsaXN0Jyk7XG4gICAgICAgIHByb2plY3RMaXN0ID0gW107XG4gICAgICAgIGNyZWF0ZU5ld1Byb2plY3QoKTtcbiAgICB9XG4gICAgLy9sb2FkIGV4aXN0aW5nIHByb2plY3QsIGNvbnZlcnQgZ2VuZXJpYyBvYmplY3RzIHRvIHByb2plY3RzL3Rhc2tzL2NoZWNrbGlzdHNcbiAgICBlbHNle1xuICAgICAgICBwcm9qZWN0TGlzdCA9IGxvY2FsT2JqLm1hcChlbGVtID0+IHByb2plY3RGcm9tT2JqZWN0KGVsZW0pKTtcbiAgICB9XG4gICAgY29uc29sZS50YWJsZShwcm9qZWN0TGlzdCk7XG59XG5cbi8vc3RvcmUgdGhlIHByb2plY3QgbGlzdCBpbiBsb2NhbCBzdG9yYWdlXG5jb25zdCBzdG9yZVByb2plY3RMaXN0ID0gKCkgPT57XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZU5hbWUsIEpTT04uc3RyaW5naWZ5KHByb2plY3RMaXN0KSk7XG4gICAgLy9jb25zb2xlLmxvZyhwcm9qZWN0TGlzdCk7XG59XG5cbi8vcmVzZXQgdGhlIGxvY2FsIHN0b3JhZ2VcbmNvbnN0IHJlc2V0U3RvcmFnZSA9ICgpID0+e1xuICAgIHByb2plY3RMaXN0ID0gW107XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZU5hbWUsIEpTT04uc3RyaW5naWZ5KG51bGwpKTtcbn1cblxuLy9sZXQgdGhlIHByb2plY3QgaGF2ZSBhY2Nlc3MgdG8gcHJvamVjdCBsaXN0XG5jb25zdCBnZXRQcm9qZWN0TGlzdCA9ICgpID0+e1xuICAgIHJldHVybiBwcm9qZWN0TGlzdDtcbn1cblxuLy9hZGQgYSBibGFuayBwcm9qZWN0IHRvIHRoZSBsaXN0XG5jb25zdCBjcmVhdGVOZXdQcm9qZWN0ID0gKCkgPT57XG4gICAgY29uc3QgcCA9IHByb2plY3RGYWN0b3J5KFwiTmV3IFByb2plY3RcIiwgW10pO1xuICAgIHAuYWRkVGFzaygpO1xuICAgIHByb2plY3RMaXN0LnB1c2gocCk7XG4gICAgc3RvcmVQcm9qZWN0TGlzdCgpO1xufVxuXG4vL2RlbGV0ZSBhIHByb2plY3QgZnJvbSB0aGUgbGlzdFxuY29uc3QgZGVsZXRlUHJvamVjdCA9IChwKSA9PntcbiAgICBwcm9qZWN0TGlzdCA9IHByb2plY3RMaXN0LmZpbHRlcigoZWxlbSk9PiBlbGVtICE9PSBwKTtcbiAgICBzdG9yZVByb2plY3RMaXN0KCk7XG59XG5cbmV4cG9ydCB7bG9hZFByb2plY3RMaXN0LCBzdG9yZVByb2plY3RMaXN0LCByZXNldFN0b3JhZ2UsIGdldFByb2plY3RMaXN0LCBjcmVhdGVOZXdQcm9qZWN0LCBkZWxldGVQcm9qZWN0fTtcbiIsImltcG9ydCB7IHN0b3JlUHJvamVjdExpc3QgfSBmcm9tIFwiLi9zdG9yYWdlTW9kdWxlXCI7XG5pbXBvcnQge2xvYWRQcm9qZWN0fSBmcm9tIFwiLi9wcm9qZWN0UGFnZU1vZHVsZS5qc1wiO1xuXG5jb25zdCBsb2FkVGFzayA9IChjb250ZW50LCBwcm9qZWN0LCB0YXNrKSA9PntcbiAgICBjb250ZW50LmlubmVySFRNTCA9ICcnO1xuXG4gICAgLy90b3AgZWxlbWVudCBjb250YWluZXJcbiAgICBjb25zdCB0b3BDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0b3BDb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsICd0YXNrLWhlYWRlcicpO1xuICAgIGNvbnRlbnQuYXBwZW5kKHRvcENvbnRhaW5lcik7XG5cbiAgICAvL2JhY2sgYnV0dG9uXG4gICAgY29uc3QgYmFja2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYmFja2VyLmlubmVyVGV4dCA9ICdCYWNrIHRvIFByb2plY3QnO1xuICAgIGJhY2tlci5jbGFzc0xpc3QuYWRkKCdiYWNrLWJ1dHRvbicpO1xuICAgIHRvcENvbnRhaW5lci5hcHBlbmQoYmFja2VyKTtcbiAgICBiYWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PntcbiAgICAgICAgbG9hZFByb2plY3QoY29udGVudCwgcHJvamVjdCk7XG4gICAgfSlcblxuICAgIC8vaDFcbiAgICBjb25zdCBoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gICAgaDEuaW5uZXJUZXh0ID0gJ0VkaXQgVGFzayc7XG4gICAgdG9wQ29udGFpbmVyLmFwcGVuZENoaWxkKGgxKTtcblxuICAgIC8vY29udGFpbmVyXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCAndGFzay1jb250YWluZXInKTtcbiAgICBjb250ZW50LmFwcGVuZChjb250YWluZXIpO1xuXG4gICAgLy90b2RvOiBhbGwgdGFzayBlbGVtZW50cyBhcyBpbnB1dHNcblxuICAgIC8vdGl0bGVcbiAgICBjb25zdCB0aXRsZSA9IGlucHV0TWFrZXIoY29udGFpbmVyLCAnVGl0bGUnLCAnaW5wdXQnLCB0ZXh0SW5wdXRGYWN0b3J5KTtcbiAgICB0aXRsZS5zZXRWYWx1ZSh0YXNrLnRpdGxlKTtcblxuICAgIC8vZGVzY1xuICAgIGNvbnN0IGRlc2MgPSBpbnB1dE1ha2VyKGNvbnRhaW5lciwgJ0Rlc2NyaXB0aW9uJywgJ3RleHRhcmVhJywgdGV4dEFyZWFGYWN0b3J5KTtcbiAgICBkZXNjLnNldFZhbHVlKHRhc2suZGVzYyk7XG4gICAgY29uc29sZS5sb2coZGVzYy5lbGVtLnZhbHVlKTtcbiAgICBjb25zb2xlLmxvZyh0YXNrLmRlc2MpO1xuXG4gICAgLy9ub3Rlc1xuXG4gICAgLy9kYXRlXG5cbiAgICAvL3ByaW9yaXR5XG5cblxuXG4gICAgLy9zYXZlIGJ1dHRvblxuICAgIGNvbnN0IHNhdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBzYXZlLmlubmVyVGV4dCA9ICdTYXZlIFRhc2snO1xuICAgIGNvbnRlbnQuYXBwZW5kKHNhdmUpO1xuICAgIHNhdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICAvL3RvZG86IHVwZGF0ZSB0aGUgdGFzayB3aXRoIGFsbCB0aGUgdmFsdWVzIGZyb20gdGhlIGlucHV0c1xuICAgICAgICB0YXNrLnRpdGxlID0gdGl0bGUuZ2V0VmFsdWUoKTtcbiAgICAgICAgdGFzay5kZXNjID0gZGVzYy5nZXRWYWx1ZSgpO1xuXG4gICAgICAgIC8vcmVwbGFjZSB0aGUgb3JpZ2luYWwgdGFzayB3aXRoIHRoZSBjb3B5XG4gICAgICAgIC8qcHJvamVjdC50YXNrTGlzdCA9IHByb2plY3QudGFza0xpc3QubWFwKChlbGVtKT0+e1xuICAgICAgICAgICAgaWYoZWxlbSA9PT0gdGFzayl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Rhc2sgcmVwbGFjZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza0NvcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLnRhYmxlKHByb2plY3QpOyovXG5cbiAgICAgICAgLy9zYXZlIGFuZCBnbyBiYWNrXG4gICAgICAgIHN0b3JlUHJvamVjdExpc3QoKTtcbiAgICAgICAgbG9hZFByb2plY3QoY29udGVudCwgcHJvamVjdCk7XG4gICAgfSk7XG59O1xuXG5jb25zdCBpbnB1dE1ha2VyID0gKGVsZW0sIHRpdGxlLCBlbGVtVHlwZSwgZmFjdG9yeSkgPT5cbntcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtLmFwcGVuZChib3gpO1xuXG4gICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsLmlubmVyVGV4dCA9IHRpdGxlO1xuICAgIGJveC5hcHBlbmQobGFiZWwpO1xuXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1UeXBlKTtcbiAgICBib3guYXBwZW5kKGlucHV0KTtcblxuICAgIGNvbnN0IGlucHV0T2JqID0gZmFjdG9yeShpbnB1dCwgbGFiZWwpO1xuICAgIGNvbnNvbGUubG9nKGlucHV0T2JqKTtcblxuICAgIHJldHVybiBpbnB1dE9iajtcbn1cblxuLy9mYWN0b3J5IHRvIGNyZWF0ZSBhbiBvYmplY3QgdG8gbWFuYWdlIGFuIGlucHV0IGVsZW1lbnRcbi8vdG9kbzogbGVhcm4gZmFjdG9yeSBhYnN0cmFjdHMvaW50ZXJmYWNlcyB0byBtYWtlIG9iamVjdHMgbW9yZSB1bmlmb3JtXG4vL2Fsc28gbGVhcm4gc3RhdGljIHZhcmlhYmxlcyBmb3IgZmFjdG9yaWVzXG5jb25zdCB0ZXh0SW5wdXRGYWN0b3J5ID0gKGVsZW0sIGxhYmVsKSA9PntcbiAgICBjb25zdCBzZXRWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSgndmFsdWUnLHZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFZhbHVlID0gKCkgPT4gXG4gICAge1xuICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtlbGVtLCBsYWJlbCwgc2V0VmFsdWUsIGdldFZhbHVlfTtcbn1cblxuY29uc3QgdGV4dEFyZWFGYWN0b3J5ID0gKGVsZW0sIGxhYmVsKSA9PntcbiAgY29uc3Qgc2V0VmFsdWUgPSAodmFsdWUpID0+IHtcbiAgICAvL2VsZW0uc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHZhbHVlKTtcbiAgICAgIGVsZW0uaW5uZXJUZXh0ID0gdmFsdWU7XG4gIH07XG4gIGNvbnN0IGdldFZhbHVlID0gKCkgPT4gXG4gIHtcbiAgICAgIHJldHVybiBlbGVtLnZhbHVlO1xuICB9O1xuXG4gICAgcmV0dXJuIHtlbGVtLCBsYWJlbCwgc2V0VmFsdWUsIGdldFZhbHVlfTtcbn1cblxuZXhwb3J0IHtsb2FkVGFza307IiwiaW1wb3J0IHsgbG9hZEhvbWUgfSBmcm9tIFwiLi9ob21lUGFnZU1vZHVsZVwiO1xuaW1wb3J0IHsgc3RvcmVQcm9qZWN0TGlzdCB9IGZyb20gXCIuL3N0b3JhZ2VNb2R1bGVcIjtcbmltcG9ydCB7IGxvYWRUYXNrIH0gZnJvbSBcIi4vdGFza1BhZ2VNb2R1bGVcIjtcblxuLy9tb2R1bGUgZm9yIGRpc3BsYXlpbmcgdGFza3Mgd2l0aGluIGEgcHJvamVjdFxuXG4vL3VzZSB0aGUgY3VycmVudCBwcm9qZWN0IHRvIGFzc2VtYmxlIGFuIGh0bWwgcGFnZVxuY29uc3QgbG9hZFByb2plY3QgPSAoY29udGVudCwgcHJvamVjdCkgPT57XG4gIGNvbnRlbnQuaW5uZXJIVE1MID0gJyc7XG5cbiAgLy90b3AgZWxlbWVudCBjb250YWluZXJcbiAgY29uc3QgdG9wQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRvcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Byb2plY3QtaW5mbycpO1xuICBjb250ZW50LmFwcGVuZENoaWxkKHRvcENvbnRhaW5lcik7XG5cbiAgLy9iYWNrIGJ1dHRvblxuICBjb25zdCBiYWNrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYmFja2VyLmlubmVyVGV4dCA9ICdCYWNrIHRvIEhvbWUnO1xuICBiYWNrZXIuY2xhc3NMaXN0LmFkZCgnYmFjay1idXR0b24nKTtcbiAgdG9wQ29udGFpbmVyLmFwcGVuZENoaWxkKGJhY2tlcik7XG4gIGJhY2tlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xuICAgIGxvYWRIb21lKGNvbnRlbnQpO1xuICB9KVxuXG4gIC8vaDFcbiAgY29uc3QgaDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICBoMS5pbm5lclRleHQgPSBwcm9qZWN0Lm5hbWU7XG4gIHRvcENvbnRhaW5lci5hcHBlbmRDaGlsZChoMSk7XG5cbiAgLy9yZW5hbWUgYnV0dG9uXG4gIGNvbnN0IHByb2plY3ROYW1lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBwcm9qZWN0TmFtZXIuaW5uZXJUZXh0ID0gJ1JlbmFtZSBQcm9qZWN0JztcbiAgcHJvamVjdE5hbWVyLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtcmVuYW1lJyk7XG4gIHRvcENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0TmFtZXIpO1xuICBcbiAgcHJvamVjdE5hbWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICBjb25zdCBpbnB1dCA9IHByb21wdCgnTmV3IHByb2plY3QgbmFtZT8nKTtcbiAgICBpZihpbnB1dCl7XG4gICAgICBwcm9qZWN0Lm5hbWUgPSBpbnB1dDtcbiAgICAgIGgxLmlubmVyVGV4dCA9IGlucHV0O1xuICAgICAgc3RvcmVQcm9qZWN0TGlzdCgpO1xuICAgIH1cbiAgfSk7XG5cblxuICAvL2NyZWF0ZSBidXR0b25cbiAgY29uc3QgY3JlYXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBjcmVhdGVyLmlubmVyVGV4dCA9ICdDcmVhdGUgTmV3IFRhc2snO1xuICBjcmVhdGVyLmNsYXNzTGlzdC5hZGQoJ2NyZWF0ZS1idXR0b24nKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChjcmVhdGVyKTtcbiAgY3JlYXRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgcHJvamVjdC5hZGRUYXNrKCk7XG4gICAgc3RvcmVQcm9qZWN0TGlzdCgpO1xuICAgIGxvYWRQcm9qZWN0KGNvbnRlbnQsIHByb2plY3QpO1xuICB9KTtcblxuICAvL3VsXG4gIGNvbnN0IHVMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgdUxpc3Quc2V0QXR0cmlidXRlKCdpZCcsICd0YXNrLWxpc3QnKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZCh1TGlzdCk7XG5cbiAgLy9saSBlbGVtZW50c1xuICBjb25zdCB0YXNrTGlzdCA9IHByb2plY3QudGFza0xpc3Q7XG4gIGNvbnN0IHBhcmVudEluZm8gPSB7Y29udGVudCwgcHJvamVjdH07XG4gIC8vY29uc29sZS5sb2cocHJvamVjdExpc3QpO1xuICB0YXNrTGlzdC5mb3JFYWNoKHQgPT4ge1xuICAgIC8vbGkgZWxlbWVudFxuICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgdUxpc3QuYXBwZW5kQ2hpbGQocm93KTtcblxuICAgIC8vbWluaS1wYW5lXG4gICAgY3JlYXRlTWluaVRhc2tQYW5lKHQsIHJvdywgcGFyZW50SW5mbyk7XG4gIH0pO1xuXG4gIC8vYXBwZW5kIGxpc3QgdG8gY29udGVudFxuICBjb250ZW50LmFwcGVuZENoaWxkKHVMaXN0KTtcbn1cblxuY29uc3QgY3JlYXRlTWluaVRhc2tQYW5lID0gKHRhc2ssIGVsZW0sIHBhcmVudEluZm8pPT57XG4gIGNvbnN0IGlubmVySXRlbSA9IG1pbmlUYXNrQ29udGVudCh0YXNrLCBlbGVtKTtcblxuICAvL2V4cGFuZFxuICBjb25zdCBleHBhbmRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBleHBhbmRlci5jbGFzc0xpc3QuYWRkKCdtaW5pLXRhc2stZXhwYW5kJyk7XG4gIGV4cGFuZGVyLmlubmVyVGV4dCA9ICc+JztcbiAgaW5uZXJJdGVtLmFwcGVuZChleHBhbmRlcik7XG4gIGV4cGFuZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICBlbGVtLmlubmVySFRNTCA9ICcnO1xuICAgIGNyZWF0ZUZ1bGxUYXNrUGFuZSh0YXNrLCBlbGVtLCBwYXJlbnRJbmZvKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGlubmVySXRlbTtcbn07XG5cbmNvbnN0IG1pbmlUYXNrQ29udGVudCA9ICh0YXNrLCBlbGVtLCBwYXJlbnRJbmZvKSA9PiB7XG4gIGNvbnN0IGlubmVySXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpbm5lckl0ZW0uY2xhc3NMaXN0LmFkZCgnbWluaS10YXNrJyk7XG4gIGVsZW0uYXBwZW5kKGlubmVySXRlbSk7XG5cbiAgLy90aXRsZVxuICBjb25zdCB0VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdFRpdGxlLmNsYXNzTGlzdC5hZGQoJ21pbmktdGFzay10aXRsZScpO1xuICB0VGl0bGUuaW5uZXJUZXh0ID0gdGFzay50aXRsZTtcbiAgaW5uZXJJdGVtLmFwcGVuZCh0VGl0bGUpO1xuXG4gIC8vZHVlIGRhdGVcbiAgY29uc3QgdERhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdERhdGUuY2xhc3NMaXN0LmFkZCgnbWluaS10YXNrLWRhdGUnKTtcbiAgdERhdGUuaW5uZXJUZXh0ID0gdGFzay5kdWVEYXRlO1xuICBpbm5lckl0ZW0uYXBwZW5kKHREYXRlKTtcblxuICAvL3NldCBwcmlvcml0eSBjb2xvclxuICBpZih0YXNrLnJlc29sdmVkKVxuICAgIGlubmVySXRlbS5jbGFzc0xpc3QuYWRkKHByaW9yaXR5Q29sb3IoJ25vbmUnKSk7XG4gIGVsc2VcbiAgICBpbm5lckl0ZW0uY2xhc3NMaXN0LmFkZChwcmlvcml0eUNvbG9yKHRhc2sucHJpb3JpdHkpKTtcblxuICByZXR1cm4gaW5uZXJJdGVtO1xufTtcblxuY29uc3QgY3JlYXRlRnVsbFRhc2tQYW5lID0gKHRhc2ssIGVsZW0sIHBhcmVudEluZm8pPT57XG4gIGNvbnN0IGlubmVySXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpbm5lckl0ZW0uY2xhc3NMaXN0LmFkZCgnZnVsbC10YXNrJyk7XG4gIGVsZW0uYXBwZW5kKGlubmVySXRlbSk7XG5cbiAgLy9jb3B5IHRoZSBjb250ZW50IG9mIHRoZSBtaW5pLXRhc2sgYmFyXG4gIGNvbnN0IG1pbmkgPSBtaW5pVGFza0NvbnRlbnQodGFzaywgaW5uZXJJdGVtKTtcblxuICAvL3Nocmlua1xuICBjb25zdCBzaHJpbmtlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBzaHJpbmtlci5jbGFzc0xpc3QuYWRkKCdtaW5pLXRhc2stZXhwYW5kJyk7XG4gIHNocmlua2VyLmlubmVyVGV4dCA9ICdeJztcbiAgbWluaS5hcHBlbmQoc2hyaW5rZXIpO1xuICBzaHJpbmtlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgZWxlbS5pbm5lckhUTUwgPSAnJztcbiAgICBjcmVhdGVNaW5pVGFza1BhbmUodGFzaywgZWxlbSk7XG4gIH0pO1xuXG4gIC8vZXhwYW5kZWQgZGV0YWlsc1xuICBjb25zdCBkZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRldGFpbHMuY2xhc3NMaXN0LmFkZCgnZnVsbC10YXNrLWRldGFpbHMnKTtcbiAgZWxlbS5hcHBlbmQoZGV0YWlscyk7XG5cbiAgLy9kZXNjcmlwdGlvblxuICBjb25zdCBkZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRlc2MuY2xhc3NMaXN0LmFkZCgnZnVsbC10YXNrLXRleHQnKTtcbiAgZGVzYy5pbm5lclRleHQgPSB0YXNrLmRlc2M7XG4gIGRldGFpbHMuYXBwZW5kKGRlc2MpO1xuXG4gIC8vbm90ZXNcbiAgY29uc3Qgbm90ZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgbm90ZXMuY2xhc3NMaXN0LmFkZCgnZnVsbC10YXNrLXRleHQnKTtcbiAgbm90ZXMuaW5uZXJUZXh0ID0gdGFzay5ub3RlcztcbiAgZGV0YWlscy5hcHBlbmQobm90ZXMpO1xuXG4gIC8vcHJpb3JpdHlcbiAgY29uc3QgcHJpbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwcmlvLmNsYXNzTGlzdC5hZGQoJ2Z1bGwtdGFzay10ZXh0Jyk7XG4gIGlmKHRhc2sucmVzb2x2ZWQpXG4gICAgcHJpby5pbm5lclRleHQgPSBgUHJpb3JpdHk6IG5vbmUgKHJlc29sdmVkKWA7XG4gIGVsc2VcbiAgICBwcmlvLmlubmVyVGV4dCA9IGBQcmlvcml0eTogJHt0YXNrLnByaW9yaXR5fWA7XG4gIGRldGFpbHMuYXBwZW5kKHByaW8pO1xuXG4gIC8vY2hlY2tsaXN0XG4gIGNvbnN0IGNMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgY0xpc3QuY2xhc3NMaXN0LmFkZCgnZnVsbC10YXNrLWxpc3QnKTtcbiAgZGV0YWlscy5hcHBlbmQoY0xpc3QpO1xuXG4gIHRhc2suY2hlY2tMaXN0LmZvckVhY2goYz0+e1xuICAgIC8vb3V0ZXIgY29udGFpbmVyXG4gICAgY29uc3QgY2hlY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGNoZWNrLmNsYXNzTGlzdC5hZGQoJ2Z1bGwtdGFzay1saXN0LWl0ZW0nKTtcbiAgICBjTGlzdC5hcHBlbmQoY2hlY2spO1xuXG4gICAgLy9jaGVja2JveFxuICAgIGNvbnN0IGNCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGNCb3guc2V0QXR0cmlidXRlKCd0eXBlJywgJ2NoZWNrYm94Jyk7XG4gICAgY2hlY2suYXBwZW5kKGNCb3gpO1xuICAgIGlmKGNbMV0pXG4gICAgICBjQm94LnRvZ2dsZUF0dHJpYnV0ZSgnY2hlY2tlZCcpO1xuICAgIGNoZWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgIGNbMV0gPSAhY1sxXTtcbiAgICAgIHN0b3JlUHJvamVjdExpc3QoKTtcbiAgICB9KTtcblxuICAgIC8vdGV4dCBmb3IgY2hlY2tib3hcbiAgICBjb25zdCBjVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjVGV4dC5pbm5lclRleHQgPSBjWzBdO1xuICAgIGNoZWNrLmFwcGVuZChjVGV4dCk7XG4gIH0pO1xuXG4gIC8vYnV0dG9uc1xuICBjb25zdCBidXR0b25Sb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYnV0dG9uUm93LmNsYXNzTGlzdC5hZGQoJ2Z1bGwtdGFzay1idXR0b24tcm93Jyk7XG4gIGRldGFpbHMuYXBwZW5kKGJ1dHRvblJvdyk7XG5cbiAgLy9lZGl0IGJ1dHRvblxuICBjb25zdCBlZGl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGVkaXQuY2xhc3NMaXN0LmFkZCgnZnVsbC10YXNrLWVkaXQnKTtcbiAgZWRpdC5pbm5lclRleHQgPSAnRWRpdCBUYXNrJztcbiAgYnV0dG9uUm93LmFwcGVuZChlZGl0KTtcblxuICBlZGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57XG4gICAgbG9hZFRhc2socGFyZW50SW5mby5jb250ZW50LCBwYXJlbnRJbmZvLnByb2plY3QsIHRhc2spO1xuICB9KTtcblxuICAvL2RlbGV0ZSBidXR0b25cbiAgY29uc3QgZGVsQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGRlbEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdmdWxsLXRhc2stZGVsZXRlJyk7XG4gIGRlbEJ1dHRvbi5pbm5lclRleHQgPSAnRGVsZXRlIFRhc2snO1xuICBidXR0b25Sb3cuYXBwZW5kKGRlbEJ1dHRvbik7XG4gIGRlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+e1xuICAgIC8vY2Fubm90IHJlZnJlc2ggYmVjYXVzZSBubyByZWZlcmVuY2UgdG8gdGhlIHByb2plY3QgaGVyZVxuICAgIGVsZW0ucmVtb3ZlKCk7XG4gICAgcGFyZW50SW5mby5wcm9qZWN0LmRlbGV0ZVRhc2sodGFzayk7XG4gICAgc3RvcmVQcm9qZWN0TGlzdCgpO1xuICB9KTtcblxuICAvL3Jlc29sdmUgYnV0dG9uXG4gIGNvbnN0IHJlc29sdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgcmVzb2x2ZS5jbGFzc0xpc3QuYWRkKCdmdWxsLXRhc2stcmVzb2x2ZScpO1xuICByZXNvbHZlLmlubmVyVGV4dCA9ICdUb2dnbGUgUmVzb2x2ZWQnO1xuICBidXR0b25Sb3cuYXBwZW5kKHJlc29sdmUpO1xuICByZXNvbHZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT57XG4gICAgLy9jYW5ub3QgcmVmcmVzaCBiZWNhdXNlIG5vIHJlZmVyZW5jZSB0byB0aGUgcHJvamVjdCBoZXJlXG4gICAgdGFzay5yZXNvbHZlZCA9ICF0YXNrLnJlc29sdmVkO1xuICAgIGVsZW0uaW5uZXJIVE1MID0gJyc7XG4gICAgY3JlYXRlRnVsbFRhc2tQYW5lKHRhc2ssIGVsZW0sIHBhcmVudEluZm8pO1xuICAgIHN0b3JlUHJvamVjdExpc3QoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGlubmVySXRlbTtcbn1cblxuY29uc3QgcHJpb3JpdHlDb2xvciA9IChwcmlvcml0eSk9PntcbiAgc3dpdGNoKHByaW9yaXR5KXtcbiAgICBjYXNlICdoaWdoJzogXG4gICAgICByZXR1cm4gJ2hpZ2gtcHJpb3JpdHknO1xuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4gJ21lZGl1bS1wcmlvcml0eSc7XG4gICAgY2FzZSAnbG93JzpcbiAgICAgIHJldHVybiAnbG93LXByaW9yaXR5JztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICduby1wcmlvcml0eSc7XG4gIH1cbn1cblxuZXhwb3J0IHtsb2FkUHJvamVjdH07IiwiaW1wb3J0IHsgcmVzZXRTdG9yYWdlLCBnZXRQcm9qZWN0TGlzdCwgY3JlYXRlTmV3UHJvamVjdCwgZGVsZXRlUHJvamVjdH0gZnJvbSBcIi4vc3RvcmFnZU1vZHVsZVwiO1xuaW1wb3J0IHsgbG9hZFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0UGFnZU1vZHVsZVwiO1xuXG4vL21vZHVsZSBmb3IgZGlzcGxheWluZyBwcm9qZWN0cyBvbiBhIG1haW4gcGFnZVxuXG4vL2dldCB0aGUgY3VycmVudCBwcm9qZWN0IGxpc3QgYW5kIGFzc2VtYmxlIGFuIGh0bWwgcGFnZVxuY29uc3QgbG9hZEhvbWUgPSBjb250ZW50ID0+e1xuICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAvL2gxXG4gICAgY29uc3QgaDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICAgIGgxLmlubmVyVGV4dCA9ICdUT0RPIExpc3RzJztcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKGgxKTtcblxuICAgIC8vYnV0dG9uXG4gICAgY29uc3QgY3JlYXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGNyZWF0ZXIuaW5uZXJUZXh0ID0gJ0NyZWF0ZSBOZXcgUHJvamVjdCc7XG4gICAgY3JlYXRlci5jbGFzc0xpc3QuYWRkKCdjcmVhdGUtYnV0dG9uJyk7XG4gICAgY29udGVudC5hcHBlbmRDaGlsZChjcmVhdGVyKTtcbiAgICBjcmVhdGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgIGNyZWF0ZU5ld1Byb2plY3QoKTtcbiAgICAgIGxvYWRIb21lKGNvbnRlbnQpO1xuICAgIH0pO1xuXG4gICAgLy91bFxuICAgIGNvbnN0IHVMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICB1TGlzdC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Byb2plY3QtbGlzdCcpO1xuICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQodUxpc3QpO1xuXG4gICAgLy9saSBlbGVtZW50c1xuICAgIGNvbnN0IHByb2plY3RMaXN0ID0gZ2V0UHJvamVjdExpc3QoKTtcbiAgICAvL2NvbnNvbGUubG9nKHByb2plY3RMaXN0KTtcbiAgICBwcm9qZWN0TGlzdC5mb3JFYWNoKHAgPT4ge1xuICAgICAgLy9jb25zb2xlLmxvZyhwKTtcbiAgICAgIC8vbGkgZWxlbWVudFxuICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QnKTtcblxuICAgICAgLy90aXRsZVxuICAgICAgY29uc3QgcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBwVGl0bGUuY2xhc3NMaXN0LmFkZCgncHJvamVjdC10aXRsZScpO1xuICAgICAgcFRpdGxlLmlubmVyVGV4dCA9IHAubmFtZTtcbiAgICAgIGl0ZW0uYXBwZW5kKHBUaXRsZSk7XG5cbiAgICAgIC8vdGFzayBjb3VudFxuICAgICAgY29uc3QgcFRhc2tzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIHBUYXNrcy5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWNvdW50ZXInKTtcbiAgICAgIHBUYXNrcy5pbm5lclRleHQgPSBgJHtwLnRhc2tMaXN0Lmxlbmd0aH0gdG9kb3NgO1xuICAgICAgaXRlbS5hcHBlbmQocFRhc2tzKTtcblxuICAgICAgLy92aWV3XG4gICAgICBjb25zdCBwVmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgICBwVmlldy5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LXZpZXcnKTtcbiAgICAgIHBWaWV3LmlubmVyVGV4dCA9ICdWaWV3JztcbiAgICAgIGl0ZW0uYXBwZW5kKHBWaWV3KTtcbiAgICAgIHBWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgbG9hZFByb2plY3QoY29udGVudCwgcCk7XG4gICAgICB9KTtcblxuICAgICAgLy9kZWxldGUgXG4gICAgICBjb25zdCBwRGVsZXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgIHBEZWxldGUuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1kZWxldGUnKTtcbiAgICAgIHBEZWxldGUuaW5uZXJUZXh0ID0gJ0RlbGV0ZSc7XG4gICAgICBpdGVtLmFwcGVuZChwRGVsZXRlKTtcbiAgICAgIHBEZWxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICBkZWxldGVQcm9qZWN0KHApO1xuICAgICAgICBsb2FkSG9tZShjb250ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICAvL2FwcGVuZCB0byBsaXN0XG4gICAgICB1TGlzdC5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICB9KTtcblxuICAgIC8vYXBwZW5kIGxpc3QgdG8gY29udGVudFxuICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQodUxpc3QpO1xuXG4gICAgLy9hIHJlc2V0IGJ1dHRvblxuICAgIGNvbnN0IHJlc2V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIHJlc2V0ZXIuY2xhc3NMaXN0LmFkZCgnaG9tZS1yZXNldCcpO1xuICAgIHJlc2V0ZXIuaW5uZXJUZXh0ID0gJ1Jlc2V0IGFsbCc7XG4gICAgY29udGVudC5hcHBlbmQocmVzZXRlcik7XG4gICAgcmVzZXRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICByZXNldFN0b3JhZ2UoKTtcbiAgICAgIGNyZWF0ZU5ld1Byb2plY3QoKTtcbiAgICAgIGxvYWRIb21lKGNvbnRlbnQpO1xuICAgIH0pXG59XG5cbmV4cG9ydCB7bG9hZEhvbWV9OyIsImltcG9ydCB7bG9hZEhvbWV9IGZyb20gXCIuL2hvbWVQYWdlTW9kdWxlLmpzXCI7XG5pbXBvcnQge3Byb2plY3RGYWN0b3J5fSBmcm9tIFwiLi9wcm9qZWN0T2JqTW9kdWxlLmpzXCI7XG5pbXBvcnQge2xvYWRQcm9qZWN0fSBmcm9tIFwiLi9wcm9qZWN0UGFnZU1vZHVsZS5qc1wiO1xuaW1wb3J0IHt0YXNrRmFjdG9yeX0gZnJvbSBcIi4vdGFza09iak1vZHVsZVwiO1xuaW1wb3J0IHtsb2FkUHJvamVjdExpc3QsIHN0b3JlUHJvamVjdExpc3QsIHJlc2V0U3RvcmFnZX0gZnJvbSBcIi4vc3RvcmFnZU1vZHVsZVwiXG5cbi8vdGVzdCB0aGF0IHdlYnBhY2sgd29ya3NcbmNvbnNvbGUubG9nKCd3ZWJwYWNrIGNvbXBpbGVkIHRvIG1haW4uanMnKTtcblxuY29uc3QgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50Jyk7XG5cbi8vcmVzZXRTdG9yYWdlKCk7IC8vdG9kbzogcmVtb3ZlIHRoaXMgcmVzZXRcbmxvYWRQcm9qZWN0TGlzdCgpO1xuXG5sb2FkSG9tZShjb250ZW50KTtcbmNvbnNvbGUubG9nKCdlbmQgb2YgaW5kZXgnKTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==